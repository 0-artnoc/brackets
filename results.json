{
    "activeSuite": "all",
    "runInfo": {
        "app": "Brackets",
        "version": "0.23.0-0",
        "platform": "win",
        "startTime": "Thu Mar 28 2013 11:29:14 GMT-0700 (Pacific Daylight Time)",
        "branch": "jasonsanjose/all-suite",
        "sha": "df83d1d98f2d25130f070b74c766f01433b022e4",
        "endTime": "Thu Mar 28 2013 11:36:32 GMT-0700 (Pacific Daylight Time)"
    },
    "suites": {
        "CommandManager": {
            "id": 0,
            "name": "CommandManager",
            "specCount": 6,
            "passedCount": 6,
            "failedCount": 0,
            "specs": [
                {
                    "name": "CommandManager register and get a command and validate parameters.",
                    "description": "register and get a command and validate parameters",
                    "passed": true
                },
                {
                    "name": "CommandManager execute a command.",
                    "description": "execute a command",
                    "passed": true
                },
                {
                    "name": "CommandManager not execute a disabled command.",
                    "description": "not execute a disabled command",
                    "passed": true
                },
                {
                    "name": "CommandManager set enabled state and trigger enabledStateChange.",
                    "description": "set enabled state and trigger enabledStateChange",
                    "passed": true
                },
                {
                    "name": "CommandManager set checked state and trigger checkedStateChange.",
                    "description": "set checked state and trigger checkedStateChange",
                    "passed": true
                },
                {
                    "name": "CommandManager rename command trigger nameChange.",
                    "description": "rename command trigger nameChange",
                    "passed": true
                }
            ]
        },
        "Native Menus": {
            "id": 1,
            "name": "Native Menus",
            "specCount": 27,
            "passedCount": 27,
            "failedCount": 0,
            "specs": [
                {
                    "name": "Native Menus should have a brackets.app namespace.",
                    "description": "should have a brackets.app namespace",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenu should add a menu.",
                    "description": "should add a menu",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenu should return an error if invalid parameters are passed.",
                    "description": "should return an error if invalid parameters are passed",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenu (with reference) should add new menu in last position of list.",
                    "description": "should add new menu in last position of list",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenu (with reference) should add new menu after reference menu.",
                    "description": "should add new menu after reference menu",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenu (with reference) should add new menu before reference menu.",
                    "description": "should add new menu before reference menu",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenu (with reference) should add new menu at end of list when reference menu doesn't exist.",
                    "description": "should add new menu at end of list when reference menu doesn't exist",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenuItem should add a menu item.",
                    "description": "should add a menu item",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenuItem should return an error if invalid parameters are passed.",
                    "description": "should return an error if invalid parameters are passed",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenuItem (with reference) should add a menu item in first position of menu.",
                    "description": "should add a menu item in first position of menu",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenuItem (with reference) should add a menu item in last position of menu.",
                    "description": "should add a menu item in last position of menu",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenuItem (with reference) should add a menu item after the referenced menu item.",
                    "description": "should add a menu item after the referenced menu item",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenuItem (with reference) should add a menu item before the referenced menu item.",
                    "description": "should add a menu item before the referenced menu item",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenuItem (with reference) should add a menu item at the end when reference menu item doesn't exist.",
                    "description": "should add a menu item at the end when reference menu item doesn't exist",
                    "passed": true
                },
                {
                    "name": "Native Menus addMenuItem (with reference) should add menu items to beginning and end of menu section.",
                    "description": "should add menu items to beginning and end of menu section",
                    "passed": true
                },
                {
                    "name": "Native Menus removeMenu should remove a menu.",
                    "description": "should remove a menu",
                    "passed": true
                },
                {
                    "name": "Native Menus removeMenu should return an error if invalid parameters are passed.",
                    "description": "should return an error if invalid parameters are passed",
                    "passed": true
                },
                {
                    "name": "Native Menus removeMenu should return an error if the menu can't be found.",
                    "description": "should return an error if the menu can't be found",
                    "passed": true
                },
                {
                    "name": "Native Menus removeMenuItem should remove a menu item.",
                    "description": "should remove a menu item",
                    "passed": true
                },
                {
                    "name": "Native Menus removeMenuItem should return an error if invalid parameters are passed.",
                    "description": "should return an error if invalid parameters are passed",
                    "passed": true
                },
                {
                    "name": "Native Menus removeMenuItem should return an error if the menu item can't be found.",
                    "description": "should return an error if the menu item can't be found",
                    "passed": true
                },
                {
                    "name": "Native Menus getMenuItemState setMenuItemState should be able to set enabled state.",
                    "description": "should be able to set enabled state",
                    "passed": true
                },
                {
                    "name": "Native Menus getMenuItemState setMenuItemState should be able to set checked state.",
                    "description": "should be able to set checked state",
                    "passed": true
                },
                {
                    "name": "Native Menus getMenuItemState setMenuItemState should return an error if invalid parameters are passed.",
                    "description": "should return an error if invalid parameters are passed",
                    "passed": true
                },
                {
                    "name": "Native Menus getMenuTitle setMenuTitle should be able to set menu title.",
                    "description": "should be able to set menu title",
                    "passed": true
                },
                {
                    "name": "Native Menus getMenuTitle setMenuTitle should be able to set menu item title.",
                    "description": "should be able to set menu item title",
                    "passed": true
                },
                {
                    "name": "Native Menus getMenuTitle setMenuTitle should return an error if invalid parameters are passed.",
                    "description": "should return an error if invalid parameters are passed",
                    "passed": true
                }
            ]
        },
        "ViewUtils": {
            "id": 10,
            "name": "ViewUtils",
            "specCount": 4,
            "passedCount": 4,
            "failedCount": 0,
            "specs": [
                {
                    "name": "ViewUtils Scroller Shadows should not show the top shadow when no scrolling is available.",
                    "description": "should not show the top shadow when no scrolling is available",
                    "passed": true
                },
                {
                    "name": "ViewUtils Scroller Shadows should partially reveal the shadow.",
                    "description": "should partially reveal the shadow",
                    "passed": true
                },
                {
                    "name": "ViewUtils Scroller Shadows should update shadow position when installed.",
                    "description": "should update shadow position when installed",
                    "passed": true
                },
                {
                    "name": "ViewUtils Scroller Shadows should fully reveal the shadow at the bottommost scroll position.",
                    "description": "should fully reveal the shadow at the bottommost scroll position",
                    "passed": true
                }
            ]
        },
        "StringMatch": {
            "id": 12,
            "name": "StringMatch",
            "specCount": 31,
            "passedCount": 31,
            "failedCount": 0,
            "specs": [
                {
                    "name": "StringMatch findSpecialCharacters should find the important match characters in the string.",
                    "description": "should find the important match characters in the string",
                    "passed": true
                },
                {
                    "name": "StringMatch _generateMatchList should return undefined for no matches.",
                    "description": "should return undefined for no matches",
                    "passed": true
                },
                {
                    "name": "StringMatch _generateMatchList should return an array with specials matches.",
                    "description": "should return an array with specials matches",
                    "passed": true
                },
                {
                    "name": "StringMatch _generateMatchList should try contiguous matches as well, but prefer specials.",
                    "description": "should try contiguous matches as well, but prefer specials",
                    "passed": true
                },
                {
                    "name": "StringMatch _generateMatchList should handle contiguous matches that stand alone.",
                    "description": "should handle contiguous matches that stand alone",
                    "passed": true
                },
                {
                    "name": "StringMatch _generateMatchList should recognize non-matches.",
                    "description": "should recognize non-matches",
                    "passed": true
                },
                {
                    "name": "StringMatch _generateMatchList should backtrack as needed.",
                    "description": "should backtrack as needed",
                    "passed": true
                },
                {
                    "name": "StringMatch _lastSegmentSearch should compare results in the final segment properly.",
                    "description": "should compare results in the final segment properly",
                    "passed": true
                },
                {
                    "name": "StringMatch _lastSegmentSearch should handle weird comparisons as well.",
                    "description": "should handle weird comparisons as well",
                    "passed": true
                },
                {
                    "name": "StringMatch _lastSegmentSearch should compare matches that don't fit in just the final segment.",
                    "description": "should compare matches that don't fit in just the final segment",
                    "passed": true
                },
                {
                    "name": "StringMatch _lastSegmentSearch should handle matches that don't fit at all in the final segment.",
                    "description": "should handle matches that don't fit at all in the final segment",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should return appropriate matching ranges.",
                    "description": "should return appropriate matching ranges",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should prefer special characters.",
                    "description": "should prefer special characters",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should place QuickOpen well relative to other quicks.",
                    "description": "should place QuickOpen well relative to other quicks",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should find the right spec/live.",
                    "description": "should find the right spec/live",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should find the right samples/index.",
                    "description": "should find the right samples/index",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should find the right Commands.",
                    "description": "should find the right Commands",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should find the right extensions.",
                    "description": "should find the right extensions",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should find the right EUtil.",
                    "description": "should find the right EUtil",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should find the right ECH.",
                    "description": "should find the right ECH",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should find the right DMan.",
                    "description": "should find the right DMan",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should find the right sru.",
                    "description": "should find the right sru",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should find the right jsutil.",
                    "description": "should find the right jsutil",
                    "passed": true
                },
                {
                    "name": "StringMatch stringMatch should find the right jsu.",
                    "description": "should find the right jsu",
                    "passed": true
                },
                {
                    "name": "StringMatch scoring should score consecutive matches across the last segment.",
                    "description": "should score consecutive matches across the last segment",
                    "passed": true
                },
                {
                    "name": "StringMatch scoring should boost last segment matches, even when searching the whole string.",
                    "description": "should boost last segment matches, even when searching the whole string",
                    "passed": true
                },
                {
                    "name": "StringMatch scoring should treat the character after _ as a special.",
                    "description": "should treat the character after _ as a special",
                    "passed": true
                },
                {
                    "name": "StringMatch scoring should penalize matches that don't start on a special.",
                    "description": "should penalize matches that don't start on a special",
                    "passed": true
                },
                {
                    "name": "StringMatch scoring should try to prioritize points for the last segment.",
                    "description": "should try to prioritize points for the last segment",
                    "passed": true
                },
                {
                    "name": "StringMatch StringMatcher should manage its caches properly.",
                    "description": "should manage its caches properly",
                    "passed": true
                },
                {
                    "name": "StringMatch StringMatcher should handle collisions with built-in members.",
                    "description": "should handle collisions with built-in members",
                    "passed": true
                }
            ]
        },
        "KeyBindingManager": {
            "id": 20,
            "name": "KeyBindingManager",
            "specCount": 19,
            "passedCount": 19,
            "failedCount": 0,
            "specs": [
                {
                    "name": "KeyBindingManager addBinding should require command and key binding arguments.",
                    "description": "should require command and key binding arguments",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager addBinding should ignore invalid bindings.",
                    "description": "should ignore invalid bindings",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager addBinding should add single bindings to the keymap.",
                    "description": "should add single bindings to the keymap",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager addBinding should use displayKey to override display of the shortcut.",
                    "description": "should use displayKey to override display of the shortcut",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager addBinding should add multiple bindings to the keymap.",
                    "description": "should add multiple bindings to the keymap",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager addBinding should allow the command argument to be a string or an object.",
                    "description": "should allow the command argument to be a string or an object",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager addBinding should not allow a generic key binding to be replaced with another generic binding.",
                    "description": "should not allow a generic key binding to be replaced with another generic binding",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager addBinding should allow a platform-specific key binding to override a generic binding.",
                    "description": "should allow a platform-specific key binding to override a generic binding",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager addBinding should keep a platform-specific key binding if a generic binding is added later.",
                    "description": "should keep a platform-specific key binding if a generic binding is added later",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager addBinding should allow a command to map to multiple key bindings.",
                    "description": "should allow a command to map to multiple key bindings",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager addBinding should support the Ctrl key on mac.",
                    "description": "should support the Ctrl key on mac",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager addBinding should use windows key bindings on linux.",
                    "description": "should use windows key bindings on linux",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager addBinding should support windows compatible bindings.",
                    "description": "should support windows compatible bindings",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager removeBinding should handle an empty keymap gracefully.",
                    "description": "should handle an empty keymap gracefully",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager removeBinding should require a key to remove.",
                    "description": "should require a key to remove",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager removeBinding should remove a key from the key map.",
                    "description": "should remove a key from the key map",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager removeBinding should remove a key from the key map for the specified platform.",
                    "description": "should remove a key from the key map for the specified platform",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager removeBinding should exclude a specified platform key binding for a cross-platform command.",
                    "description": "should exclude a specified platform key binding for a cross-platform command",
                    "passed": true
                },
                {
                    "name": "KeyBindingManager handleKey should execute a command.",
                    "description": "should execute a command",
                    "passed": true
                }
            ]
        },
        "Code Hint Menus": {
            "id": 24,
            "name": "Code Hint Menus",
            "specCount": 2,
            "passedCount": 2,
            "failedCount": 0,
            "specs": [
                {
                    "name": "Code Hint Menus HTML Tests should show code hints menu and insert text at IP.",
                    "description": "should show code hints menu and insert text at IP",
                    "passed": true
                },
                {
                    "name": "Code Hint Menus HTML Tests should dismiss code hints menu with Esc key.",
                    "description": "should dismiss code hints menu with Esc key",
                    "passed": true
                }
            ]
        },
        "HTMLUtils": {
            "id": 26,
            "name": "HTMLUtils",
            "specCount": 27,
            "passedCount": 27,
            "failedCount": 0,
            "specs": [
                {
                    "name": "HTMLUtils Html Hinting should not find attribute hints in an empty editor.",
                    "description": "should not find attribute hints in an empty editor",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find an attribute as a tag is getting typed.",
                    "description": "should find an attribute as a tag is getting typed",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find an attribute as it's added to a tag.",
                    "description": "should find an attribute as it's added to a tag",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find an attribute as the value is typed.",
                    "description": "should find an attribute as the value is typed",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should not find an attribute as text is added.",
                    "description": "should not find an attribute as text is added",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find the attribute value if present.",
                    "description": "should find the attribute value if present",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find the full attribute as an existing value is changed.",
                    "description": "should find the full attribute as an existing value is changed",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find the attribute value even when there is space around the =.",
                    "description": "should find the attribute value even when there is space around the =",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find the attribute value when the IP is after the =.",
                    "description": "should find the attribute value when the IP is after the =",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find the tagname as it's typed.",
                    "description": "should find the tagname as it's typed",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should hint tagname as the open < is typed.",
                    "description": "should hint tagname as the open < is typed",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find the tagname of the current tag if two tags are right next to each other.",
                    "description": "should find the tagname of the current tag if two tags are right next to each other",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should hint attributes even if there is a lot of space between the tag name and the next attr name.",
                    "description": "should hint attributes even if there is a lot of space between the tag name and the next attr name",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find the tagname as space is typed before the attr name is added.",
                    "description": "should find the tagname as space is typed before the attr name is added",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should not hint anything after the tag is closed.",
                    "description": "should not hint anything after the tag is closed",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should not hint anything after a closing tag.",
                    "description": "should not hint anything after a closing tag",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should not hint anything inside a closing tag.",
                    "description": "should not hint anything inside a closing tag",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should not find attributes in an empty editor.",
                    "description": "should not find attributes in an empty editor",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should not find attributes before the tag is opened.",
                    "description": "should not find attributes before the tag is opened",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should not find attributes if there isn't a valid tag.",
                    "description": "should not find attributes if there isn't a valid tag",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should not find attributes after the tag is closed.",
                    "description": "should not find attributes after the tag is closed",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find all the tag attributes immediately after the tag.",
                    "description": "should find all the tag attributes immediately after the tag",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find all the tag attributes before closing the tag.",
                    "description": "should find all the tag attributes before closing the tag",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find all the tag attributes backward and forward.",
                    "description": "should find all the tag attributes backward and forward",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should find valid attributes marked as errors by the tokenizer.",
                    "description": "should find valid attributes marked as errors by the tokenizer",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should not find attributes in nested tags.",
                    "description": "should not find attributes in nested tags",
                    "passed": true
                },
                {
                    "name": "HTMLUtils Html Hinting should not find attributes of other tags on an opened tag.",
                    "description": "should not find attributes of other tags on an opened tag",
                    "passed": true
                }
            ]
        },
        "Document": {
            "id": 28,
            "name": "Document",
            "specCount": 1,
            "passedCount": 1,
            "failedCount": 0,
            "specs": [
                {
                    "name": "Document ref counting should clean up (later) a master Editor auto-created by calling read-only Document API, if Editor not used by UI.",
                    "description": "should clean up (later) a master Editor auto-created by calling read-only Document API, if Editor not used by UI",
                    "passed": true
                }
            ]
        },
        "DocumentCommandHandlers": {
            "id": 30,
            "name": "DocumentCommandHandlers",
            "specCount": 12,
            "passedCount": 12,
            "failedCount": 0,
            "specs": [
                {
                    "name": "DocumentCommandHandlers Close File should complete without error if no files are open.",
                    "description": "should complete without error if no files are open",
                    "passed": true
                },
                {
                    "name": "DocumentCommandHandlers Close File should close a file in the editor.",
                    "description": "should close a file in the editor",
                    "passed": true
                },
                {
                    "name": "DocumentCommandHandlers Open File should open a file in the editor.",
                    "description": "should open a file in the editor",
                    "passed": true
                },
                {
                    "name": "DocumentCommandHandlers Save File should save changes.",
                    "description": "should save changes",
                    "passed": true
                },
                {
                    "name": "DocumentCommandHandlers Save File should preserve line endings when saving changes.",
                    "description": "should preserve line endings when saving changes",
                    "passed": true
                },
                {
                    "name": "DocumentCommandHandlers Dirty File Handling should report clean immediately after opening a file.",
                    "description": "should report clean immediately after opening a file",
                    "passed": true
                },
                {
                    "name": "DocumentCommandHandlers Dirty File Handling should report dirty when modified.",
                    "description": "should report dirty when modified",
                    "passed": true
                },
                {
                    "name": "DocumentCommandHandlers Dirty File Handling should report dirty after undo and redo.",
                    "description": "should report dirty after undo and redo",
                    "passed": true
                },
                {
                    "name": "DocumentCommandHandlers Dirty File Handling should report not dirty after explicit clean.",
                    "description": "should report not dirty after explicit clean",
                    "passed": true
                },
                {
                    "name": "DocumentCommandHandlers Dirty File Handling should report not dirty after undo.",
                    "description": "should report not dirty after undo",
                    "passed": true
                },
                {
                    "name": "DocumentCommandHandlers Dirty File Handling should update dirty flag with undo/redo after explicit clean.",
                    "description": "should update dirty flag with undo/redo after explicit clean",
                    "passed": true
                },
                {
                    "name": "DocumentCommandHandlers Dirty File Handling should report dirty after undo past clean state, followed by new change.",
                    "description": "should report dirty after undo past clean state, followed by new change",
                    "passed": true
                }
            ]
        },
        "Editor": {
            "id": 35,
            "name": "Editor",
            "specCount": 10,
            "passedCount": 10,
            "failedCount": 0,
            "specs": [
                {
                    "name": "Editor Editor wrapper should initialize with content.",
                    "description": "should initialize with content",
                    "passed": true
                },
                {
                    "name": "Editor Editor wrapper should trigger a synchronous Document change event when an edit is performed.",
                    "description": "should trigger a synchronous Document change event when an edit is performed",
                    "passed": true
                },
                {
                    "name": "Editor File extension to mode mapping should switch to the HTML mode for files ending in .html.",
                    "description": "should switch to the HTML mode for files ending in .html",
                    "passed": true
                },
                {
                    "name": "Editor File extension to mode mapping should switch modes even if the url has a query string.",
                    "description": "should switch modes even if the url has a query string",
                    "passed": true
                },
                {
                    "name": "Editor File extension to mode mapping should accept just a file name too.",
                    "description": "should accept just a file name too",
                    "passed": true
                },
                {
                    "name": "Editor File extension to mode mapping should default to plain text for unknown file extensions.",
                    "description": "should default to plain text for unknown file extensions",
                    "passed": true
                },
                {
                    "name": "Editor Focus should not have focus until explicitly set.",
                    "description": "should not have focus until explicitly set",
                    "passed": true
                },
                {
                    "name": "Editor Focus should be able to detect when it has focus.",
                    "description": "should be able to detect when it has focus",
                    "passed": true
                },
                {
                    "name": "Editor getModeForSelection() should get mode in homogenous file.",
                    "description": "should get mode in homogenous file",
                    "passed": true
                },
                {
                    "name": "Editor getModeForSelection() should get mode in HTML file.",
                    "description": "should get mode in HTML file",
                    "passed": true
                }
            ]
        },
        "EditorOptionHandlers": {
            "id": 40,
            "name": "EditorOptionHandlers",
            "specCount": 8,
            "passedCount": 8,
            "failedCount": 0,
            "specs": [
                {
                    "name": "EditorOptionHandlers should wrap long lines in main editor by default.",
                    "description": "should wrap long lines in main editor by default",
                    "passed": true
                },
                {
                    "name": "EditorOptionHandlers should also wrap long lines in inline editor by default.",
                    "description": "should also wrap long lines in inline editor by default",
                    "passed": true
                },
                {
                    "name": "EditorOptionHandlers should NOT wrap the long lines after turning off word-wrap.",
                    "description": "should NOT wrap the long lines after turning off word-wrap",
                    "passed": true
                },
                {
                    "name": "EditorOptionHandlers should NOT wrap the long lines in another document when word-wrap off.",
                    "description": "should NOT wrap the long lines in another document when word-wrap off",
                    "passed": true
                },
                {
                    "name": "EditorOptionHandlers should NOT show active line in main editor by default.",
                    "description": "should NOT show active line in main editor by default",
                    "passed": true
                },
                {
                    "name": "EditorOptionHandlers should NOT show active line in inline editor by default.",
                    "description": "should NOT show active line in inline editor by default",
                    "passed": true
                },
                {
                    "name": "EditorOptionHandlers should style active line after turning it on.",
                    "description": "should style active line after turning it on",
                    "passed": true
                },
                {
                    "name": "EditorOptionHandlers should style the active line when opening another document with show active line on.",
                    "description": "should style the active line when opening another document with show active line on",
                    "passed": true
                }
            ]
        },
        "EditorManager": {
            "id": 41,
            "name": "EditorManager",
            "specCount": 12,
            "passedCount": 12,
            "failedCount": 0,
            "specs": [
                {
                    "name": "EditorManager resizeEditor() flag options should refresh if force is specified even if no width or height change.",
                    "description": "should refresh if force is specified even if no width or height change",
                    "passed": true
                },
                {
                    "name": "EditorManager resizeEditor() flag options should refresh if force is specified when width changed but height hasn't.",
                    "description": "should refresh if force is specified when width changed but height hasn't",
                    "passed": true
                },
                {
                    "name": "EditorManager resizeEditor() flag options should refresh if force is specified when height changed but width hasn't.",
                    "description": "should refresh if force is specified when height changed but width hasn't",
                    "passed": true
                },
                {
                    "name": "EditorManager resizeEditor() flag options should refresh if force is specified when both height and width changed.",
                    "description": "should refresh if force is specified when both height and width changed",
                    "passed": true
                },
                {
                    "name": "EditorManager resizeEditor() flag options should NOT refresh if skip is specified if no width or height change.",
                    "description": "should NOT refresh if skip is specified if no width or height change",
                    "passed": true
                },
                {
                    "name": "EditorManager resizeEditor() flag options should NOT refresh if skip is specified when width changed but height hasn't.",
                    "description": "should NOT refresh if skip is specified when width changed but height hasn't",
                    "passed": true
                },
                {
                    "name": "EditorManager resizeEditor() flag options should NOT refresh if skip is specified when height changed but width hasn't.",
                    "description": "should NOT refresh if skip is specified when height changed but width hasn't",
                    "passed": true
                },
                {
                    "name": "EditorManager resizeEditor() flag options should NOT refresh if skip is specified when both height and width changed.",
                    "description": "should NOT refresh if skip is specified when both height and width changed",
                    "passed": true
                },
                {
                    "name": "EditorManager resizeEditor() flag options should NOT refresh if unspecified if no width or height change.",
                    "description": "should NOT refresh if unspecified if no width or height change",
                    "passed": true
                },
                {
                    "name": "EditorManager resizeEditor() flag options should refresh if unspecified when width changed but height hasn't.",
                    "description": "should refresh if unspecified when width changed but height hasn't",
                    "passed": true
                },
                {
                    "name": "EditorManager resizeEditor() flag options should refresh if unspecified when height changed but width hasn't.",
                    "description": "should refresh if unspecified when height changed but width hasn't",
                    "passed": true
                },
                {
                    "name": "EditorManager resizeEditor() flag options should refresh if unspecified when both height and width changed.",
                    "description": "should refresh if unspecified when both height and width changed",
                    "passed": true
                }
            ]
        },
        "Extension Installation": {
            "id": 43,
            "name": "Extension Installation",
            "specCount": 4,
            "passedCount": 4,
            "failedCount": 0,
            "specs": [
                {
                    "name": "Extension Installation should return information about a valid file.",
                    "description": "should return information about a valid file",
                    "passed": true
                },
                {
                    "name": "Extension Installation should detect missing metadata.",
                    "description": "should detect missing metadata",
                    "passed": true
                },
                {
                    "name": "Extension Installation extensions should install and load.",
                    "description": "extensions should install and load",
                    "passed": true
                },
                {
                    "name": "Extension Installation extensions should install disabled if they are not compatible.",
                    "description": "extensions should install disabled if they are not compatible",
                    "passed": true
                }
            ]
        },
        "Extension Utils": {
            "id": 44,
            "name": "Extension Utils",
            "specCount": 4,
            "passedCount": 4,
            "failedCount": 0,
            "specs": [
                {
                    "name": "Extension Utils loadStyleSheet should load CSS style sheets with imports.",
                    "description": "should load CSS style sheets with imports",
                    "passed": true
                },
                {
                    "name": "Extension Utils loadStyleSheet should detect errors loading the initial path.",
                    "description": "should detect errors loading the initial path",
                    "passed": true
                },
                {
                    "name": "Extension Utils loadStyleSheet should detect errors loading imports.",
                    "description": "should detect errors loading imports",
                    "passed": true
                },
                {
                    "name": "Extension Utils loadStyleSheet should attach LESS style sheets.",
                    "description": "should attach LESS style sheets",
                    "passed": true
                }
            ]
        },
        "FileIndexManager": {
            "id": 46,
            "name": "FileIndexManager",
            "specCount": 5,
            "passedCount": 5,
            "failedCount": 0,
            "specs": [
                {
                    "name": "FileIndexManager should index files in directory.",
                    "description": "should index files in directory",
                    "passed": true
                },
                {
                    "name": "FileIndexManager should handle simultaneous requests without doing extra work.",
                    "description": "should handle simultaneous requests without doing extra work",
                    "passed": true
                },
                {
                    "name": "FileIndexManager should match a specific filename and return the correct FileInfo.",
                    "description": "should match a specific filename and return the correct FileInfo",
                    "passed": true
                },
                {
                    "name": "FileIndexManager should update the indicies on project change.",
                    "description": "should update the indicies on project change",
                    "passed": true
                },
                {
                    "name": "FileIndexManager should update the indicies after being marked dirty.",
                    "description": "should update the indicies after being marked dirty",
                    "passed": true
                }
            ]
        },
        "FindReplace": {
            "id": 47,
            "name": "FindReplace",
            "specCount": 26,
            "passedCount": 26,
            "failedCount": 0,
            "specs": [
                {
                    "name": "FindReplace Search should find all case-insensitive matches.",
                    "description": "should find all case-insensitive matches",
                    "passed": true
                },
                {
                    "name": "FindReplace Search should find all case-sensitive matches.",
                    "description": "should find all case-sensitive matches",
                    "passed": true
                },
                {
                    "name": "FindReplace Search should Find Next after search bar closed, including wraparound.",
                    "description": "should Find Next after search bar closed, including wraparound",
                    "passed": true
                },
                {
                    "name": "FindReplace Search should Find Previous after search bar closed, including wraparound.",
                    "description": "should Find Previous after search bar closed, including wraparound",
                    "passed": true
                },
                {
                    "name": "FindReplace Search shouldn't Find Next after search bar reopened.",
                    "description": "shouldn't Find Next after search bar reopened",
                    "passed": true
                },
                {
                    "name": "FindReplace Search should open search bar on Find Next with no previous search.",
                    "description": "should open search bar on Find Next with no previous search",
                    "passed": true
                },
                {
                    "name": "FindReplace Search should select-all without affecting search state if Find invoked while search bar open.",
                    "description": "should select-all without affecting search state if Find invoked while search bar open",
                    "passed": true
                },
                {
                    "name": "FindReplace Incremental search should re-search from original position when text changes.",
                    "description": "should re-search from original position when text changes",
                    "passed": true
                },
                {
                    "name": "FindReplace Incremental search should re-search from original position when text changes, even after Find Next.",
                    "description": "should re-search from original position when text changes, even after Find Next",
                    "passed": true
                },
                {
                    "name": "FindReplace Incremental search should extend original selection when appending to prepopulated text.",
                    "description": "should extend original selection when appending to prepopulated text",
                    "passed": true
                },
                {
                    "name": "FindReplace Incremental search should collapse selection when appending to prepopulated text causes no result.",
                    "description": "should collapse selection when appending to prepopulated text causes no result",
                    "passed": true
                },
                {
                    "name": "FindReplace Incremental search should clear selection, return cursor to start after backspacing to empty query.",
                    "description": "should clear selection, return cursor to start after backspacing to empty query",
                    "passed": true
                },
                {
                    "name": "FindReplace Terminating search should go to next on Enter with prepopulated text & no Find Nexts.",
                    "description": "should go to next on Enter with prepopulated text & no Find Nexts",
                    "passed": true
                },
                {
                    "name": "FindReplace Terminating search shouldn't change selection on Esc with prepopulated text & no Find Nexts.",
                    "description": "shouldn't change selection on Esc with prepopulated text & no Find Nexts",
                    "passed": true
                },
                {
                    "name": "FindReplace Terminating search shouldn't change selection on Enter with prepopulated text & after Find Next.",
                    "description": "shouldn't change selection on Enter with prepopulated text & after Find Next",
                    "passed": true
                },
                {
                    "name": "FindReplace Terminating search shouldn't change selection on Enter after typing text, no Find Nexts.",
                    "description": "shouldn't change selection on Enter after typing text, no Find Nexts",
                    "passed": true
                },
                {
                    "name": "FindReplace Terminating search shouldn't change selection on Enter after typing text & Find Next.",
                    "description": "shouldn't change selection on Enter after typing text & Find Next",
                    "passed": true
                },
                {
                    "name": "FindReplace Terminating search should no-op on Find Next with blank search.",
                    "description": "should no-op on Find Next with blank search",
                    "passed": true
                },
                {
                    "name": "FindReplace Terminating search should no-op on Enter with blank search.",
                    "description": "should no-op on Enter with blank search",
                    "passed": true
                },
                {
                    "name": "FindReplace RegExp Search should find based on regexp.",
                    "description": "should find based on regexp",
                    "passed": true
                },
                {
                    "name": "FindReplace RegExp Search should be a case-sensitive regexp by default.",
                    "description": "should be a case-sensitive regexp by default",
                    "passed": true
                },
                {
                    "name": "FindReplace RegExp Search should support case-insensitive regexps via /.../i.",
                    "description": "should support case-insensitive regexps via /.../i",
                    "passed": true
                },
                {
                    "name": "FindReplace RegExp Search shouldn't choke on partial regexp.",
                    "description": "shouldn't choke on partial regexp",
                    "passed": true
                },
                {
                    "name": "FindReplace RegExp Search shouldn't choke on invalid regexp.",
                    "description": "shouldn't choke on invalid regexp",
                    "passed": true
                },
                {
                    "name": "FindReplace RegExp Search shouldn't choke on empty regexp.",
                    "description": "shouldn't choke on empty regexp",
                    "passed": true
                },
                {
                    "name": "FindReplace RegExp Search shouldn't freeze on /.*/ regexp.",
                    "description": "shouldn't freeze on /.*/ regexp",
                    "passed": true
                }
            ]
        },
        "Install Extension Dialog": {
            "id": 52,
            "name": "Install Extension Dialog",
            "specCount": 46,
            "passedCount": 46,
            "failedCount": 0,
            "specs": [
                {
                    "name": "Install Extension Dialog tests should open the dialog.",
                    "description": "should open the dialog",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should have the install button disabled when dialog is first open due to empty url field.",
                    "description": "should have the install button disabled when dialog is first open due to empty url field",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should not start install if enter hit while url field is empty.",
                    "description": "should not start install if enter hit while url field is empty",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog when Cancel button clicked before entering url.",
                    "description": "should close the dialog when Cancel button clicked before entering url",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog when Esc pressed before entering url.",
                    "description": "should close the dialog when Esc pressed before entering url",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should enable the install button when the url field is nonempty.",
                    "description": "should enable the install button when the url field is nonempty",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should re-disable the install button if the url field becomes nonempty and then empty.",
                    "description": "should re-disable the install button if the url field becomes nonempty and then empty",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog when Cancel button clicked after entering url.",
                    "description": "should close the dialog when Cancel button clicked after entering url",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog when Esc pressed after entering url.",
                    "description": "should close the dialog when Esc pressed after entering url",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should start the installer with the given URL when Install button clicked.",
                    "description": "should start the installer with the given URL when Install button clicked",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should start the installer with the given URL when Enter is pressed.",
                    "description": "should start the installer with the given URL when Enter is pressed",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should disable the ok button while installing.",
                    "description": "should disable the ok button while installing",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should hide the url field while installing.",
                    "description": "should hide the url field while installing",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should do nothing if Enter pressed while installing.",
                    "description": "should do nothing if Enter pressed while installing",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should cancel installation if cancel clicked while installing.",
                    "description": "should cancel installation if cancel clicked while installing",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should cancel installation if Esc pressed while installing.",
                    "description": "should cancel installation if Esc pressed while installing",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should disable the cancel button while cancellation is processed.",
                    "description": "should disable the cancel button while cancellation is processed",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should ignore the Esc key while cancellation is processed.",
                    "description": "should ignore the Esc key while cancellation is processed",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should ignore the Enter key while cancellation is processed.",
                    "description": "should ignore the Enter key while cancellation is processed",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should re-enable the ok button and hide cancel button after install succeeds.",
                    "description": "should re-enable the ok button and hide cancel button after install succeeds",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should re-enable the ok button and hide cancel button after install succeeds synchronously.",
                    "description": "should re-enable the ok button and hide cancel button after install succeeds synchronously",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should re-enable the ok button and hide cancel button after install fails.",
                    "description": "should re-enable the ok button and hide cancel button after install fails",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should re-enable the ok button and hide cancel button after install fails synchronously.",
                    "description": "should re-enable the ok button and hide cancel button after install fails synchronously",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should re-enable the ok button and hide cancel button after install finishes canceling.",
                    "description": "should re-enable the ok button and hide cancel button after install finishes canceling",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if ok button clicked after install succeeds.",
                    "description": "should close the dialog if ok button clicked after install succeeds",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if ok button clicked after install succeeds synchronously.",
                    "description": "should close the dialog if ok button clicked after install succeeds synchronously",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if Enter pressed after install succeeds.",
                    "description": "should close the dialog if Enter pressed after install succeeds",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if Enter pressed after install succeeds synchronously.",
                    "description": "should close the dialog if Enter pressed after install succeeds synchronously",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if Esc pressed after install succeeds.",
                    "description": "should close the dialog if Esc pressed after install succeeds",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if Esc pressed after install succeeds synchronously.",
                    "description": "should close the dialog if Esc pressed after install succeeds synchronously",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if ok button clicked after install fails.",
                    "description": "should close the dialog if ok button clicked after install fails",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if ok button clicked after install fails synchronously.",
                    "description": "should close the dialog if ok button clicked after install fails synchronously",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if Enter pressed after install fails.",
                    "description": "should close the dialog if Enter pressed after install fails",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if Enter pressed after install fails synchronously.",
                    "description": "should close the dialog if Enter pressed after install fails synchronously",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if Esc pressed after install fails.",
                    "description": "should close the dialog if Esc pressed after install fails",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if Esc pressed after install fails synchronously.",
                    "description": "should close the dialog if Esc pressed after install fails synchronously",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if ok button clicked after install finishes canceling.",
                    "description": "should close the dialog if ok button clicked after install finishes canceling",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if Enter pressed after install finishes canceling.",
                    "description": "should close the dialog if Enter pressed after install finishes canceling",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close the dialog if Esc pressed after install finishes canceling.",
                    "description": "should close the dialog if Esc pressed after install finishes canceling",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should time out and re-enable close button if cancel doesn't complete quickly.",
                    "description": "should time out and re-enable close button if cancel doesn't complete quickly",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close when clicking Close button after timing out if cancel doesn't complete quickly.",
                    "description": "should close when clicking Close button after timing out if cancel doesn't complete quickly",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close when hitting Enter after timing out if cancel doesn't complete quickly.",
                    "description": "should close when hitting Enter after timing out if cancel doesn't complete quickly",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should close when hitting Esc after timing out if cancel doesn't complete quickly.",
                    "description": "should close when hitting Esc after timing out if cancel doesn't complete quickly",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should keep close button enabled and not throw an exception if install succeeds after cancelation.",
                    "description": "should keep close button enabled and not throw an exception if install succeeds after cancelation",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should keep close button enabled and not throw an exception if install fails after cancelation.",
                    "description": "should keep close button enabled and not throw an exception if install fails after cancelation",
                    "passed": true
                },
                {
                    "name": "Install Extension Dialog tests should keep close button enabled and not throw an exception if install cancelation completes after cancelation.",
                    "description": "should keep close button enabled and not throw an exception if install cancelation completes after cancelation",
                    "passed": true
                }
            ]
        },
        "EditorCommandHandlers": {
            "id": 54,
            "name": "EditorCommandHandlers",
            "specCount": 137,
            "passedCount": 137,
            "failedCount": 0,
            "specs": [
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should comment/uncomment a single line, cursor at start.",
                    "description": "should comment/uncomment a single line, cursor at start",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should comment/uncomment a single line, cursor at end.",
                    "description": "should comment/uncomment a single line, cursor at end",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should comment/uncomment first line in file.",
                    "description": "should comment/uncomment first line in file",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should comment/uncomment a single partly-selected line.",
                    "description": "should comment/uncomment a single partly-selected line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should comment/uncomment a single selected line.",
                    "description": "should comment/uncomment a single selected line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should comment/uncomment a single fully-selected line (including LF).",
                    "description": "should comment/uncomment a single fully-selected line (including LF)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should comment/uncomment multiple selected lines.",
                    "description": "should comment/uncomment multiple selected lines",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should comment/uncomment ragged multi-line selection.",
                    "description": "should comment/uncomment ragged multi-line selection",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should comment/uncomment when selection starts & ends on whitespace lines.",
                    "description": "should comment/uncomment when selection starts & ends on whitespace lines",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should do nothing on whitespace line.",
                    "description": "should do nothing on whitespace line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should do nothing when only whitespace lines selected.",
                    "description": "should do nothing when only whitespace lines selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should comment/uncomment after select all.",
                    "description": "should comment/uncomment after select all",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should comment/uncomment lines that were partially commented out already, our style.",
                    "description": "should comment/uncomment lines that were partially commented out already, our style",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should comment/uncomment lines that were partially commented out already, comment closer to code.",
                    "description": "should comment/uncomment lines that were partially commented out already, comment closer to code",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should uncomment indented, aligned comments.",
                    "description": "should uncomment indented, aligned comments",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment/uncomment should uncomment ragged partial comments.",
                    "description": "should uncomment ragged partial comments",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment in languages with mutiple line comment prefixes should comment using the first prefix.",
                    "description": "should comment using the first prefix",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment in languages with mutiple line comment prefixes should uncomment every prefix.",
                    "description": "should uncomment every prefix",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment in languages with mutiple line comment prefixes should only uncomment the first prefix.",
                    "description": "should only uncomment the first prefix",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block comment/uncomment, cursor at start of line.",
                    "description": "should block comment/uncomment, cursor at start of line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block comment/uncomment, cursor to left of existing block comment.",
                    "description": "should block comment/uncomment, cursor to left of existing block comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block comment/uncomment, subset of line selected.",
                    "description": "should block comment/uncomment, subset of line selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block uncomment, cursor within existing sub-line block comment.",
                    "description": "should block uncomment, cursor within existing sub-line block comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block uncomment, selection covering whole sub-line block comment.",
                    "description": "should block uncomment, selection covering whole sub-line block comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block comment/uncomment, selection from mid-line end of line.",
                    "description": "should block comment/uncomment, selection from mid-line end of line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block comment/uncomment, all of line selected but not newline.",
                    "description": "should block comment/uncomment, all of line selected but not newline",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block comment/uncomment, all of line selected including newline.",
                    "description": "should block comment/uncomment, all of line selected including newline",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block comment/uncomment, multiple lines selected.",
                    "description": "should block comment/uncomment, multiple lines selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block comment/uncomment, multiple partial lines selected.",
                    "description": "should block comment/uncomment, multiple partial lines selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block uncomment, cursor in whitespace within block comment.",
                    "description": "should block uncomment, cursor in whitespace within block comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block uncomment, selection in whitespace within block comment.",
                    "description": "should block uncomment, selection in whitespace within block comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block uncomment, selection covers block comment plus whitespace before.",
                    "description": "should block uncomment, selection covers block comment plus whitespace before",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block uncomment, selection covers block comment plus whitespace after.",
                    "description": "should block uncomment, selection covers block comment plus whitespace after",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block uncomment, selection covers part of block comment plus whitespace before.",
                    "description": "should block uncomment, selection covers part of block comment plus whitespace before",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block uncomment, selection covers part of block comment plus whitespace after.",
                    "description": "should block uncomment, selection covers part of block comment plus whitespace after",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block uncomment, selection covers block comment plus whitespace on both sides.",
                    "description": "should block uncomment, selection covers block comment plus whitespace on both sides",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block uncomment, selection covers block comment plus other text.",
                    "description": "should block uncomment, selection covers block comment plus other text",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should block uncomment, selection covers multi-line block comment plus other text.",
                    "description": "should block uncomment, selection covers multi-line block comment plus other text",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should do nothing, selection covers parts of multiple block comments.",
                    "description": "should do nothing, selection covers parts of multiple block comments",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should do nothing, selection covers all of multiple block comments.",
                    "description": "should do nothing, selection covers all of multiple block comments",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should do nothing, selection covers multiple block comments & nothing else.",
                    "description": "should do nothing, selection covers multiple block comments & nothing else",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment/uncomment should do nothing, selection covers multiple block comments plus other text.",
                    "description": "should do nothing, selection covers multiple block comments plus other text",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should switch to line uncomment mode, cursor inside line comment (with only whitespace to left).",
                    "description": "should switch to line uncomment mode, cursor inside line comment (with only whitespace to left)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should switch to line uncomment, cursor in whitespace to left of line comment.",
                    "description": "should switch to line uncomment, cursor in whitespace to left of line comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should switch to line uncomment, some of line-comment selected (only whitespace to left).",
                    "description": "should switch to line uncomment, some of line-comment selected (only whitespace to left)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should switch to line uncomment, some of line-comment selected including last char (only whitespace to left).",
                    "description": "should switch to line uncomment, some of line-comment selected including last char (only whitespace to left)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should switch to line uncomment, all of line-comment selected (only whitespace to left).",
                    "description": "should switch to line uncomment, all of line-comment selected (only whitespace to left)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should insert block comment, cursor inside line comment (with code to left).",
                    "description": "should insert block comment, cursor inside line comment (with code to left)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should insert block comment, cursor in code to left of line comment.",
                    "description": "should insert block comment, cursor in code to left of line comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should block comment, some of line-comment selected (with code to left).",
                    "description": "should block comment, some of line-comment selected (with code to left)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should block comment, some of line-comment selected including last char (with code to left).",
                    "description": "should block comment, some of line-comment selected including last char (with code to left)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should block comment, all of line-comment selected (with code to left).",
                    "description": "should block comment, all of line-comment selected (with code to left)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should switch to line uncomment, all of line-comment line selected (following line is code).",
                    "description": "should switch to line uncomment, all of line-comment line selected (following line is code)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should switch to line uncomment, all of line-comment line selected (following line is whitespace).",
                    "description": "should switch to line uncomment, all of line-comment line selected (following line is whitespace)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should switch to line uncomment, all of line-comment line selected (following line is line comment).",
                    "description": "should switch to line uncomment, all of line-comment line selected (following line is line comment)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should switch to line uncomment, all of line-comment line selected (following line is block comment).",
                    "description": "should switch to line uncomment, all of line-comment line selected (following line is block comment)",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should line uncomment, multiple line comments selected.",
                    "description": "should line uncomment, multiple line comments selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should line uncomment, multiline selection covers line comment plus whitespace.",
                    "description": "should line uncomment, multiline selection covers line comment plus whitespace",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should switch to line uncomment mode, selection starts in whitespace & ends in middle of line comment.",
                    "description": "should switch to line uncomment mode, selection starts in whitespace & ends in middle of line comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should switch to line uncomment mode, selection starts in whitespace & ends at end of line comment.",
                    "description": "should switch to line uncomment mode, selection starts in whitespace & ends at end of line comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should block comment, selection starts in code & ends in middle of line comment.",
                    "description": "should block comment, selection starts in code & ends in middle of line comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should block comment, selection starts in middle of code & ends at end of line comment.",
                    "description": "should block comment, selection starts in middle of code & ends at end of line comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should block comment, selection starts in code & ends at end of line comment.",
                    "description": "should block comment, selection starts in code & ends at end of line comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should block comment, selection starts at col 0 of code & ends at end of line comment.",
                    "description": "should block comment, selection starts at col 0 of code & ends at end of line comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should block comment, selection starts on line with line comment.",
                    "description": "should block comment, selection starts on line with line comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should block comment, selection ends on line with line comment.",
                    "description": "should block comment, selection ends on line with line comment",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Block comment around line comments should line uncomment, selection covers several line comments separated by whitespace.",
                    "description": "should line uncomment, selection covers several line comments separated by whitespace",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment auto-switching to block comment should block-comment entire line that cursor is in.",
                    "description": "should block-comment entire line that cursor is in",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment auto-switching to block comment should block-comment entire line that sub-line selection is in.",
                    "description": "should block-comment entire line that sub-line selection is in",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment auto-switching to block comment should block-comment full multi-line selection.",
                    "description": "should block-comment full multi-line selection",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment auto-switching to block comment should block-comment partial multi-line selection as if it were full.",
                    "description": "should block-comment partial multi-line selection as if it were full",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment auto-switching to block comment should uncomment multi-line block comment selection, selected exactly.",
                    "description": "should uncomment multi-line block comment selection, selected exactly",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment auto-switching to block comment should uncomment multi-line block comment selection, selected including trailing newline.",
                    "description": "should uncomment multi-line block comment selection, selected including trailing newline",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment auto-switching to block comment should uncomment multi-line block comment selection, only start selected.",
                    "description": "should uncomment multi-line block comment selection, only start selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment auto-switching to block comment should uncomment multi-line block comment selection, only middle selected.",
                    "description": "should uncomment multi-line block comment selection, only middle selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment auto-switching to block comment should uncomment multi-line block comment selection, only end selected.",
                    "description": "should uncomment multi-line block comment selection, only end selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment auto-switching to block comment should uncomment multi-line block comment selection, only end selected, ends at EOF.",
                    "description": "should uncomment multi-line block comment selection, only end selected, ends at EOF",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Line comment auto-switching to block comment should uncomment multi-line block comment that cursor is in.",
                    "description": "should uncomment multi-line block comment that cursor is in",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Comment/uncomment with mixed syntax modes should block comment/uncomment generic HTML code.",
                    "description": "should block comment/uncomment generic HTML code",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Comment/uncomment with mixed syntax modes should block comment/uncomment generic CSS code.",
                    "description": "should block comment/uncomment generic CSS code",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Comment/uncomment with mixed syntax modes should line comment/uncomment generic JS code.",
                    "description": "should line comment/uncomment generic JS code",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Comment/uncomment with mixed syntax modes should block comment/uncomment generic JS code.",
                    "description": "should block comment/uncomment generic JS code",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Comment/uncomment with mixed syntax modes should HTML comment/uncomment around outside of <style> block.",
                    "description": "should HTML comment/uncomment around outside of <style> block",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Comment/uncomment with mixed syntax modes shouldn't comment anything when selection mixes modes.",
                    "description": "shouldn't comment anything when selection mixes modes",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Duplicate should duplicate whole line if no selection.",
                    "description": "should duplicate whole line if no selection",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Duplicate should duplicate line + \n if selected line is at end of file.",
                    "description": "should duplicate line + \n if selected line is at end of file",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Duplicate should duplicate first line.",
                    "description": "should duplicate first line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Duplicate should duplicate empty line.",
                    "description": "should duplicate empty line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Duplicate should duplicate selection within a line.",
                    "description": "should duplicate selection within a line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Duplicate should duplicate when entire line selected, excluding newline.",
                    "description": "should duplicate when entire line selected, excluding newline",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Duplicate should duplicate when entire line selected, including newline.",
                    "description": "should duplicate when entire line selected, including newline",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Duplicate should duplicate when multiple lines selected.",
                    "description": "should duplicate when multiple lines selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Duplicate should duplicate selection crossing line boundary.",
                    "description": "should duplicate selection crossing line boundary",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Duplicate should duplicate after select all.",
                    "description": "should duplicate after select all",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move whole line up if no selection.",
                    "description": "should move whole line up if no selection",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move whole line down if no selection.",
                    "description": "should move whole line down if no selection",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down shouldn't move up first line.",
                    "description": "shouldn't move up first line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down shouldn't move down last line.",
                    "description": "shouldn't move down last line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move up empty line.",
                    "description": "should move up empty line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move down empty line.",
                    "description": "should move down empty line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move up when entire line selected, excluding newline.",
                    "description": "should move up when entire line selected, excluding newline",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move down when entire line selected, excluding newline.",
                    "description": "should move down when entire line selected, excluding newline",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move up when entire line selected, including newline.",
                    "description": "should move up when entire line selected, including newline",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move down when entire line selected, including newline.",
                    "description": "should move down when entire line selected, including newline",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move up when multiple lines selected.",
                    "description": "should move up when multiple lines selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move down when multiple lines selected.",
                    "description": "should move down when multiple lines selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move up selection crossing line boundary.",
                    "description": "should move up selection crossing line boundary",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move down selection crossing line boundary.",
                    "description": "should move down selection crossing line boundary",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move the last line up.",
                    "description": "should move the last line up",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move the first line down.",
                    "description": "should move the first line down",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move the last lines up.",
                    "description": "should move the last lines up",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down should move the first lines down.",
                    "description": "should move the first lines down",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down shouldn't move up after select all.",
                    "description": "shouldn't move up after select all",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Move Lines Up/Down shouldn't move down after select all.",
                    "description": "shouldn't move down after select all",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line should delete the first line when selection is an IP in that line.",
                    "description": "should delete the first line when selection is an IP in that line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line should delete the first line when selection is a range in that line.",
                    "description": "should delete the first line when selection is a range in that line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line should delete a middle line when selection is an IP in that line.",
                    "description": "should delete a middle line when selection is an IP in that line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line should delete a middle line when selection is a range in that line.",
                    "description": "should delete a middle line when selection is a range in that line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line should delete the last line when selection is an IP in that line.",
                    "description": "should delete the last line when selection is an IP in that line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line should delete the last line when selection is a range in that line.",
                    "description": "should delete the last line when selection is a range in that line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line should delete multiple lines starting at the top when selection spans them.",
                    "description": "should delete multiple lines starting at the top when selection spans them",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line should delete multiple lines ending at the bottom when selection spans them.",
                    "description": "should delete multiple lines ending at the bottom when selection spans them",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line should leave empty text when all lines are selected.",
                    "description": "should leave empty text when all lines are selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line - editor with visible range should delete the top line of the visible range.",
                    "description": "should delete the top line of the visible range",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line - editor with visible range should delete the bottom line of the visible range.",
                    "description": "should delete the bottom line of the visible range",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line - editor with visible range should leave a single newline when all visible lines are selected.",
                    "description": "should leave a single newline when all visible lines are selected",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Delete Line - editor with visible range should leave a single newline when only one line is visible.",
                    "description": "should leave a single newline when only one line is visible",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Select Line should select the first line with IP in that line.",
                    "description": "should select the first line with IP in that line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Select Line should select the last line with IP in that line.",
                    "description": "should select the last line with IP in that line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Select Line should select all in one-line file.",
                    "description": "should select all in one-line file",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Select Line should extend selection to whole line.",
                    "description": "should extend selection to whole line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Select Line should extend whole line selection to next line.",
                    "description": "should extend whole line selection to next line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Select Line should extend multi-line selection to full lines.",
                    "description": "should extend multi-line selection to full lines",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Select Line should extend full multi-line selection to one more line.",
                    "description": "should extend full multi-line selection to one more line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Select Line - editor with visible range shouldn't select past end of visible range, IP in middle of last visible line.",
                    "description": "shouldn't select past end of visible range, IP in middle of last visible line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Select Line - editor with visible range shouldn't select past end of visible range, IP at start of last visible line.",
                    "description": "shouldn't select past end of visible range, IP at start of last visible line",
                    "passed": true
                },
                {
                    "name": "EditorCommandHandlers Select Line - editor with visible range should extend selection to include last line of visible range.",
                    "description": "should extend selection to include last line of visible range",
                    "passed": true
                }
            ]
        },
        "LowLevelFileIO": {
            "id": 67,
            "name": "LowLevelFileIO",
            "specCount": 27,
            "passedCount": 27,
            "failedCount": 0,
            "specs": [
                {
                    "name": "LowLevelFileIO should have a brackets.fs namespace.",
                    "description": "should have a brackets.fs namespace",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO readdir should read a directory from disk.",
                    "description": "should read a directory from disk",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO readdir should return an error if the directory doesn't exist.",
                    "description": "should return an error if the directory doesn't exist",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO readdir should return an error if the directory can't be read (Mac only).",
                    "description": "should return an error if the directory can't be read (Mac only)",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO readdir should return an error if invalid parameters are passed.",
                    "description": "should return an error if invalid parameters are passed",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO stat should return correct information for a directory.",
                    "description": "should return correct information for a directory",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO stat should return correct information for a file.",
                    "description": "should return correct information for a file",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO stat should return an error if the file/directory doesn't exist.",
                    "description": "should return an error if the file/directory doesn't exist",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO stat should return an error if incorrect parameters are passed.",
                    "description": "should return an error if incorrect parameters are passed",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO readFile should read a text file.",
                    "description": "should read a text file",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO readFile should return an error if trying to read a non-existent file.",
                    "description": "should return an error if trying to read a non-existent file",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO readFile should return an error if trying to use an unsppported encoding.",
                    "description": "should return an error if trying to use an unsppported encoding",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO readFile should return an error if called with invalid parameters.",
                    "description": "should return an error if called with invalid parameters",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO readFile should return an error if trying to read a directory.",
                    "description": "should return an error if trying to read a directory",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO writeFile should write the entire contents of a file.",
                    "description": "should write the entire contents of a file",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO writeFile should return an error if the file can't be written (Mac only).",
                    "description": "should return an error if the file can't be written (Mac only)",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO writeFile should return an error if called with invalid parameters.",
                    "description": "should return an error if called with invalid parameters",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO writeFile should return an error if trying to write a directory.",
                    "description": "should return an error if trying to write a directory",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO unlink should remove a file.",
                    "description": "should remove a file",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO unlink should return an error if the file doesn't exist.",
                    "description": "should return an error if the file doesn't exist",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO unlink should return an error if the a directory is specified.",
                    "description": "should return an error if the a directory is specified",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO unlink should return an error if called with invalid parameters.",
                    "description": "should return an error if called with invalid parameters",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO mkdir should make a new directory.",
                    "description": "should make a new directory",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO rename should rename a file.",
                    "description": "should rename a file",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO rename should rename a folder.",
                    "description": "should rename a folder",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO rename should return an error if the new name already exists.",
                    "description": "should return an error if the new name already exists",
                    "passed": true
                },
                {
                    "name": "LowLevelFileIO rename should return an error if the parent folder is read only (Mac only).",
                    "description": "should return an error if the parent folder is read only (Mac only)",
                    "passed": true
                }
            ]
        },
        "MultiRangeInlineEditor": {
            "id": 75,
            "name": "MultiRangeInlineEditor",
            "specCount": 8,
            "passedCount": 8,
            "failedCount": 0,
            "specs": [
                {
                    "name": "MultiRangeInlineEditor should initialize to a default state.",
                    "description": "should initialize to a default state",
                    "passed": true
                },
                {
                    "name": "MultiRangeInlineEditor should load a single rule and initialize htmlContent and editor.",
                    "description": "should load a single rule and initialize htmlContent and editor",
                    "passed": true
                },
                {
                    "name": "MultiRangeInlineEditor should contain a rule list widget displaying info for each rule.",
                    "description": "should contain a rule list widget displaying info for each rule",
                    "passed": true
                },
                {
                    "name": "MultiRangeInlineEditor should change selection to the next rule.",
                    "description": "should change selection to the next rule",
                    "passed": true
                },
                {
                    "name": "MultiRangeInlineEditor should change selection to the previous rule.",
                    "description": "should change selection to the previous rule",
                    "passed": true
                },
                {
                    "name": "MultiRangeInlineEditor should retreive all rules.",
                    "description": "should retreive all rules",
                    "passed": true
                },
                {
                    "name": "MultiRangeInlineEditor should retreive the selected rule.",
                    "description": "should retreive the selected rule",
                    "passed": true
                },
                {
                    "name": "MultiRangeInlineEditor should close and return to the host editor.",
                    "description": "should close and return to the host editor",
                    "passed": true
                }
            ]
        },
        "InlineEditorProviders": {
            "id": 76,
            "name": "InlineEditorProviders",
            "specCount": 40,
            "passedCount": 40,
            "failedCount": 0,
            "specs": [
                {
                    "name": "InlineEditorProviders htmlToCSSProvider should open a type selector.",
                    "description": "should open a type selector",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider should open a class selector.",
                    "description": "should open a class selector",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider should also open a class selector.",
                    "description": "should also open a class selector",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider should open an id selector.",
                    "description": "should open an id selector",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider should close, then remove the inline widget and restore focus.",
                    "description": "should close, then remove the inline widget and restore focus",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider should close inline widget on Esc Key.",
                    "description": "should close inline widget on Esc Key",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider should not open an inline editor when positioned on textContent.",
                    "description": "should not open an inline editor when positioned on textContent",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider should not open an inline editor when positioned on a tag in a comment.",
                    "description": "should not open an inline editor when positioned on a tag in a comment",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider should increase size based on content.",
                    "description": "should increase size based on content",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider should decrease size based on content.",
                    "description": "should decrease size based on content",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider should save changes in the inline editor.",
                    "description": "should save changes in the inline editor",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider should not save changes in the host editor.",
                    "description": "should not save changes in the host editor",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor syncing from disk should close inline editor when file deleted on disk.",
                    "description": "should close inline editor when file deleted on disk",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor syncing from disk should close inline when file is closed without saving changes.",
                    "description": "should close inline when file is closed without saving changes",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Bi-directional Editor Synchronizing should not add an inline document to the working set without being edited.",
                    "description": "should not add an inline document to the working set without being edited",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Bi-directional Editor Synchronizing should add dirty documents to the working set.",
                    "description": "should add dirty documents to the working set",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Bi-directional Editor Synchronizing should sync edits between full and inline editors.",
                    "description": "should sync edits between full and inline editors",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should insert new line at start of range, and stay open on undo.",
                    "description": "should insert new line at start of range, and stay open on undo",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should insert new line within first line of range, and stay open on undo.",
                    "description": "should insert new line within first line of range, and stay open on undo",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should not close inline when undoing changes to first line in range that did not include newlines.",
                    "description": "should not close inline when undoing changes to first line in range that did not include newlines",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should sync deletions (and their undos) on last line in range, with or without newlines.",
                    "description": "should sync deletions (and their undos) on last line in range, with or without newlines",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should sync insertions (and their undos) in most cases without closing.",
                    "description": "should sync insertions (and their undos) in most cases without closing",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should sync deletions from the full editor and update the visual range of the inline editor.",
                    "description": "should sync deletions from the full editor and update the visual range of the inline editor",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should close inline when newline at beginning of range is deleted.",
                    "description": "should close inline when newline at beginning of range is deleted",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should stay open when first line entirely deleted.",
                    "description": "should stay open when first line entirely deleted",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should stay open when first line and following text deleted.",
                    "description": "should stay open when first line and following text deleted",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should stay open when first two lines deleted.",
                    "description": "should stay open when first two lines deleted",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should close inline when last line entirely deleted.",
                    "description": "should close inline when last line entirely deleted",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should close inline when last line and preceding text deleted.",
                    "description": "should close inline when last line and preceding text deleted",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should close inline when last line and more preceding text deleted.",
                    "description": "should close inline when last line and more preceding text deleted",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should close inline when deletion spans top of range.",
                    "description": "should close inline when deletion spans top of range",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should close inline when deletion spans top of range (barely).",
                    "description": "should close inline when deletion spans top of range (barely)",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should close inline when deletion spans bottom of range.",
                    "description": "should close inline when deletion spans bottom of range",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should sync insertions with multiple change objects in one event.",
                    "description": "should sync insertions with multiple change objects in one event",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should sync multiple edits between full and inline editors.",
                    "description": "should sync multiple edits between full and inline editors",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should close inline if the contents of the full editor are all deleted.",
                    "description": "should close inline if the contents of the full editor are all deleted",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range updating should sync after undoing and redoing an edit.",
                    "description": "should sync after undoing and redoing an edit",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Multiple inline editor interaction should keep range consistent after undo/redo (bug #1031).",
                    "description": "should keep range consistent after undo/redo (bug #1031)",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range equal to file range should delete line at bottom and not close on undo.",
                    "description": "should delete line at bottom and not close on undo",
                    "passed": true
                },
                {
                    "name": "InlineEditorProviders htmlToCSSProvider Inline Editor range equal to file range should insert new line at bottom and not close on undo.",
                    "description": "should insert new line at bottom and not close on undo",
                    "passed": true
                }
            ]
        },
        "Node Connection": {
            "id": 83,
            "name": "Node Connection",
            "specCount": 7,
            "passedCount": 7,
            "failedCount": 0,
            "specs": [
                {
                    "name": "Node Connection should not crash when attempting to load malformed domains.",
                    "description": "should not crash when attempting to load malformed domains",
                    "passed": true
                },
                {
                    "name": "Node Connection should execute synchronous commands.",
                    "description": "should execute synchronous commands",
                    "passed": true
                },
                {
                    "name": "Node Connection should execute asynchronous commands.",
                    "description": "should execute asynchronous commands",
                    "passed": true
                },
                {
                    "name": "Node Connection should receive events.",
                    "description": "should receive events",
                    "passed": true
                },
                {
                    "name": "Node Connection should receive command errors and continue to run.",
                    "description": "should receive command errors and continue to run",
                    "passed": true
                },
                {
                    "name": "Node Connection should be robust to malformed messages.",
                    "description": "should be robust to malformed messages",
                    "passed": true
                },
                {
                    "name": "Node Connection should restart and automatically reconnect/reload.",
                    "description": "should restart and automatically reconnect/reload",
                    "passed": true
                }
            ]
        },
        "PreferenceStorage": {
            "id": 84,
            "name": "PreferenceStorage",
            "specCount": 6,
            "passedCount": 6,
            "failedCount": 0,
            "specs": [
                {
                    "name": "PreferenceStorage should read initial preferences from JSON.",
                    "description": "should read initial preferences from JSON",
                    "passed": true
                },
                {
                    "name": "PreferenceStorage should store values as JSON.",
                    "description": "should store values as JSON",
                    "passed": true
                },
                {
                    "name": "PreferenceStorage should output preferences as JSON.",
                    "description": "should output preferences as JSON",
                    "passed": true
                },
                {
                    "name": "PreferenceStorage should remove values.",
                    "description": "should remove values",
                    "passed": true
                },
                {
                    "name": "PreferenceStorage should use setAllValues to append multiple new name/value pairs.",
                    "description": "should use setAllValues to append multiple new name/value pairs",
                    "passed": true
                },
                {
                    "name": "PreferenceStorage should throw errors for invalid values.",
                    "description": "should throw errors for invalid values",
                    "passed": true
                }
            ]
        },
        "PreferencesManager": {
            "id": 85,
            "name": "PreferencesManager",
            "specCount": 1,
            "passedCount": 1,
            "failedCount": 0,
            "specs": [
                {
                    "name": "PreferencesManager should use default preferences.",
                    "description": "should use default preferences",
                    "passed": true
                }
            ]
        },
        "ProjectManager": {
            "id": 86,
            "name": "ProjectManager",
            "specCount": 5,
            "passedCount": 5,
            "failedCount": 0,
            "specs": [
                {
                    "name": "ProjectManager createNewItem should create a new file with a given name.",
                    "description": "should create a new file with a given name",
                    "passed": true
                },
                {
                    "name": "ProjectManager createNewItem should fail when a file already exists.",
                    "description": "should fail when a file already exists",
                    "passed": true
                },
                {
                    "name": "ProjectManager createNewItem should fail when a file name matches a directory that already exists.",
                    "description": "should fail when a file name matches a directory that already exists",
                    "passed": true
                },
                {
                    "name": "ProjectManager createNewItem should fail when file name contains special characters.",
                    "description": "should fail when file name contains special characters",
                    "passed": true
                },
                {
                    "name": "ProjectManager File Display should not show useless directory entries.",
                    "description": "should not show useless directory entries",
                    "passed": true
                }
            ]
        },
        "QuickOpen": {
            "id": 89,
            "name": "QuickOpen",
            "specCount": 1,
            "passedCount": 0,
            "failedCount": 1,
            "specs": [
                {
                    "name": "QuickOpen can open a file and jump to a line, centering that line on the screen.",
                    "description": "can open a file and jump to a line, centering that line on the screen",
                    "passed": false,
                    "messages": [
                        "Error: Expected 578 to be less than 500.\n    at new jasmine.ExpectationResult (file:///C:/Users/jasonsj/Github/brackets/test/thirdparty/jasmine-core/jasmine.js:102:32)\n    at null.toBeLessThan (file:///C:/Users/jasonsj/Github/brackets/test/thirdparty/jasmine-core/jasmine.js:1194:29)\n    at null.<anonymous> (file:///C:/Users/jasonsj/Github/brackets/test/spec/QuickOpen-test.js:157:37)\n    at jasmine.Block.execute (file:///C:/Users/jasonsj/Github/brackets/test/thirdparty/jasmine-core/jasmine.js:1024:15)\n    at jasmine.Queue.next_ (file:///C:/Users/jasonsj/Github/brackets/test/thirdparty/jasmine-core/jasmine.js:1842:31)\n    at onComplete (file:///C:/Users/jasonsj/Github/brackets/test/thirdparty/jasmine-core/jasmine.js:1838:18)\n    at jasmine.WaitsForBlock.execute (file:///C:/Users/jasonsj/Github/brackets/test/thirdparty/jasmine-core/jasmine.js:2322:5)\n    at file:///C:/Users/jasonsj/Github/brackets/test/thirdparty/jasmine-core/jasmine.js:2336:12"
                    ]
                }
            ]
        },
        "UpdateNotification": {
            "id": 90,
            "name": "UpdateNotification",
            "specCount": 6,
            "passedCount": 6,
            "failedCount": 0,
            "specs": [
                {
                    "name": "UpdateNotification should show a notification if an update is available.",
                    "description": "should show a notification if an update is available",
                    "passed": true
                },
                {
                    "name": "UpdateNotification should show update information for all available updates.",
                    "description": "should show update information for all available updates",
                    "passed": true
                },
                {
                    "name": "UpdateNotification should not show dialog if user has already been notified.",
                    "description": "should not show dialog if user has already been notified",
                    "passed": true
                },
                {
                    "name": "UpdateNotification should not show dialog if app is up to date.",
                    "description": "should not show dialog if app is up to date",
                    "passed": true
                },
                {
                    "name": "UpdateNotification should show an 'up to date' alert if no updates are available and the user manually checks for updates.",
                    "description": "should show an 'up to date' alert if no updates are available and the user manually checks for updates",
                    "passed": true
                },
                {
                    "name": "UpdateNotification should sanitize text returned from server.",
                    "description": "should sanitize text returned from server",
                    "passed": true
                }
            ]
        },
        "Menus": {
            "id": 91,
            "name": "Menus",
            "specCount": 5,
            "passedCount": 5,
            "failedCount": 0,
            "specs": [
                {
                    "name": "Menus Context Menus register a context menu.",
                    "description": "register a context menu",
                    "passed": true
                },
                {
                    "name": "Menus Context Menus open a context menu.",
                    "description": "open a context menu",
                    "passed": true
                },
                {
                    "name": "Menus Context Menus context menu is not clipped.",
                    "description": "context menu is not clipped",
                    "passed": true
                },
                {
                    "name": "Menus Context Menus close context menu.",
                    "description": "close context menu",
                    "passed": true
                },
                {
                    "name": "Menus Context Menus close context menu using Esc key.",
                    "description": "close context menu using Esc key",
                    "passed": true
                }
            ]
        },
        "WorkingSetView": {
            "id": 93,
            "name": "WorkingSetView",
            "specCount": 7,
            "passedCount": 7,
            "failedCount": 0,
            "specs": [
                {
                    "name": "WorkingSetView should add a list item when a file is dirtied.",
                    "description": "should add a list item when a file is dirtied",
                    "passed": true
                },
                {
                    "name": "WorkingSetView should remove a list item when a file is closed.",
                    "description": "should remove a list item when a file is closed",
                    "passed": true
                },
                {
                    "name": "WorkingSetView should make a file that is clicked the current one in the editor.",
                    "description": "should make a file that is clicked the current one in the editor",
                    "passed": true
                },
                {
                    "name": "WorkingSetView should rebuild the ui from the model correctly.",
                    "description": "should rebuild the ui from the model correctly",
                    "passed": true
                },
                {
                    "name": "WorkingSetView should close a file when the user clicks the close button.",
                    "description": "should close a file when the user clicks the close button",
                    "passed": true
                },
                {
                    "name": "WorkingSetView should remove dirty icon when file becomes clean.",
                    "description": "should remove dirty icon when file becomes clean",
                    "passed": true
                },
                {
                    "name": "WorkingSetView should show the file in project tree when a file is being renamed.",
                    "description": "should show the file in project tree when a file is being renamed",
                    "passed": true
                }
            ]
        },
        "NativeFileSystem": {
            "id": 94,
            "name": "NativeFileSystem",
            "specCount": 20,
            "passedCount": 20,
            "failedCount": 0,
            "specs": [
                {
                    "name": "NativeFileSystem Reading a directory should read a directory from disk.",
                    "description": "should read a directory from disk",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Reading a directory should return an error if the directory doesn't exist.",
                    "description": "should return an error if the directory doesn't exist",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Reading a directory should return an error if you pass a bad parameter.",
                    "description": "should return an error if you pass a bad parameter",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Reading a directory should be okay to not pass an error callback.",
                    "description": "should be okay to not pass an error callback",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Reading a directory can read an empty folder.",
                    "description": "can read an empty folder",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Reading a directory should timeout with error when reading dir if low-level stat call takes too long.",
                    "description": "should timeout with error when reading dir if low-level stat call takes too long",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Reading a file should read a file from disk.",
                    "description": "should read a file from disk",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Reading a file should read a file from disk with lower case encoding.",
                    "description": "should read a file from disk with lower case encoding",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Reading a file should read a file from disk with upper case encoding.",
                    "description": "should read a file from disk with upper case encoding",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Reading a file should return an error if the file is not found.",
                    "description": "should return an error if the file is not found",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Reading a file should fire appropriate events when the file is done loading.",
                    "description": "should fire appropriate events when the file is done loading",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Reading a file should return an error but not crash if you create a bad FileEntry.",
                    "description": "should return an error but not crash if you create a bad FileEntry",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Writing should create new, zero-length files.",
                    "description": "should create new, zero-length files",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Writing should report an error when a file does not exist and create = false.",
                    "description": "should report an error when a file does not exist and create = false",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Writing should return an error if file exists and exclusive is true.",
                    "description": "should return an error if file exists and exclusive is true",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Writing should return an error if the path is a directory.",
                    "description": "should return an error if the path is a directory",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Writing should create overwrite files with new content.",
                    "description": "should create overwrite files with new content",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Writing should write an empty file.",
                    "description": "should write an empty file",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Writing should report an error when writing to a file that cannot be read (Mac only).",
                    "description": "should report an error when writing to a file that cannot be read (Mac only)",
                    "passed": true
                },
                {
                    "name": "NativeFileSystem Writing should report an error when writing to a file that cannot be written.",
                    "description": "should report an error when writing to a file that cannot be written",
                    "passed": true
                }
            ]
        },
        "Performance Tests": {
            "id": 98,
            "name": "Performance Tests",
            "specCount": 1,
            "passedCount": 1,
            "failedCount": 0,
            "specs": [
                {
                    "name": "Performance Tests File open performance.",
                    "description": "File open performance",
                    "passed": true,
                    "perf": [
                        {
                            "name": "brackets-concat.js",
                            "value": [
                                869
                            ]
                        },
                        {
                            "name": "jquery_ui_index.html",
                            "value": [
                                158
                            ]
                        },
                        {
                            "name": "blank.js",
                            "value": [
                                184
                            ]
                        },
                        {
                            "name": "InlineWidget.js",
                            "value": [
                                311
                            ]
                        },
                        {
                            "name": "quiet-scrollbars.css",
                            "value": [
                                397
                            ]
                        },
                        {
                            "name": "England(Chinese).htm",
                            "value": [
                                747
                            ]
                        },
                        {
                            "name": "jquery.mobile-1.1.0.css",
                            "value": [
                                407
                            ]
                        },
                        {
                            "name": "jquery.mobile-1.1.0.min.css",
                            "value": [
                                478
                            ]
                        },
                        {
                            "name": "jquery.mobile-1.1.0.js",
                            "value": [
                                760
                            ]
                        },
                        {
                            "name": "jquery.mobile-1.1.0.min.js",
                            "value": [
                                784
                            ]
                        }
                    ]
                }
            ]
        },
        "LanguageManager": {
            "id": 99,
            "name": "LanguageManager",
            "specCount": 18,
            "passedCount": 17,
            "failedCount": 1,
            "specs": [
                {
                    "name": "LanguageManager built-in languages should support built-in languages.",
                    "description": "should support built-in languages",
                    "passed": true
                },
                {
                    "name": "LanguageManager LanguageManager API should map identifiers to languages.",
                    "description": "should map identifiers to languages",
                    "passed": true
                },
                {
                    "name": "LanguageManager LanguageManager API should map file extensions to languages.",
                    "description": "should map file extensions to languages",
                    "passed": true
                },
                {
                    "name": "LanguageManager LanguageManager API should map file names to languages.",
                    "description": "should map file names to languages",
                    "passed": true
                },
                {
                    "name": "LanguageManager defineLanguage should create a basic language.",
                    "description": "should create a basic language",
                    "passed": true
                },
                {
                    "name": "LanguageManager defineLanguage should log errors for invalid language id values.",
                    "description": "should log errors for invalid language id values",
                    "passed": true
                },
                {
                    "name": "LanguageManager defineLanguage should log errors for invalid language name values.",
                    "description": "should log errors for invalid language name values",
                    "passed": true
                },
                {
                    "name": "LanguageManager defineLanguage should log errors for missing mode value.",
                    "description": "should log errors for missing mode value",
                    "passed": true
                },
                {
                    "name": "LanguageManager defineLanguage should create a language with file extensions and a mode.",
                    "description": "should create a language with file extensions and a mode",
                    "passed": false,
                    "messages": [
                        "timeout: timed out after 50 msec waiting for The language should be resolved"
                    ]
                },
                {
                    "name": "LanguageManager defineLanguage should allow multiple languages to use the same mode.",
                    "description": "should allow multiple languages to use the same mode",
                    "passed": true
                },
                {
                    "name": "LanguageManager defineLanguage should return an error if a language is already defined.",
                    "description": "should return an error if a language is already defined",
                    "passed": true
                },
                {
                    "name": "LanguageManager defineLanguage should validate comment prefix/suffix.",
                    "description": "should validate comment prefix/suffix",
                    "passed": true
                },
                {
                    "name": "LanguageManager defineLanguage should validate multiple line comment prefixes.",
                    "description": "should validate multiple line comment prefixes",
                    "passed": true
                },
                {
                    "name": "LanguageManager defineLanguage should load a built-in CodeMirror mode.",
                    "description": "should load a built-in CodeMirror mode",
                    "passed": true
                },
                {
                    "name": "LanguageManager rename file extension should update the document's language when a file is renamed.",
                    "description": "should update the document's language when a file is renamed",
                    "passed": true
                },
                {
                    "name": "LanguageManager rename file extension should update the document's language when a language is added.",
                    "description": "should update the document's language when a language is added",
                    "passed": true
                },
                {
                    "name": "LanguageManager rename file extension should update the document's language when a language is added.",
                    "description": "should update the document's language when a language is added",
                    "passed": true
                },
                {
                    "name": "LanguageManager rename file extension should update the document's language when a language is modified.",
                    "description": "should update the document's language when a language is modified",
                    "passed": true
                }
            ]
        },
        "JSUtils": {
            "id": 104,
            "name": "JSUtils",
            "specCount": 30,
            "passedCount": 30,
            "failedCount": 0,
            "specs": [
                {
                    "name": "JSUtils basics should parse an empty string.",
                    "description": "should parse an empty string",
                    "passed": true
                },
                {
                    "name": "JSUtils line offsets should return correct start and end line numbers for simple functions.",
                    "description": "should return correct start and end line numbers for simple functions",
                    "passed": true
                },
                {
                    "name": "JSUtils line offsets should return correct start and end line numbers for parameterized functions.",
                    "description": "should return correct start and end line numbers for parameterized functions",
                    "passed": true
                },
                {
                    "name": "JSUtils line offsets should return correct start and end line numbers for single line functions.",
                    "description": "should return correct start and end line numbers for single line functions",
                    "passed": true
                },
                {
                    "name": "JSUtils line offsets should return correct start and end line numbers for nested functions.",
                    "description": "should return correct start and end line numbers for nested functions",
                    "passed": true
                },
                {
                    "name": "JSUtils line offsets should return correct start and end line numbers for functions with keyword 'function' in name.",
                    "description": "should return correct start and end line numbers for functions with keyword 'function' in name",
                    "passed": true
                },
                {
                    "name": "JSUtils line offsets should ignore identifiers with whitespace.",
                    "description": "should ignore identifiers with whitespace",
                    "passed": true
                },
                {
                    "name": "JSUtils line offsets should return correct start and end line numbers for prototype method declarations.",
                    "description": "should return correct start and end line numbers for prototype method declarations",
                    "passed": true
                },
                {
                    "name": "JSUtils line offsets should handle various whitespace variations.",
                    "description": "should handle various whitespace variations",
                    "passed": true
                },
                {
                    "name": "JSUtils line offsets should work with high-ascii characters in function names.",
                    "description": "should work with high-ascii characters in function names",
                    "passed": true
                },
                {
                    "name": "JSUtils line offsets should work with unicode characters in or around function names.",
                    "description": "should work with unicode characters in or around function names",
                    "passed": true
                },
                {
                    "name": "JSUtils line offsets should work when colliding with prototype properties.",
                    "description": "should work when colliding with prototype properties",
                    "passed": true
                },
                {
                    "name": "JSUtils line offsets should fail with invalid function names.",
                    "description": "should fail with invalid function names",
                    "passed": true
                },
                {
                    "name": "JSUtils brace ends of functions should handle a simple function.",
                    "description": "should handle a simple function",
                    "passed": true
                },
                {
                    "name": "JSUtils brace ends of functions should handle nested braces.",
                    "description": "should handle nested braces",
                    "passed": true
                },
                {
                    "name": "JSUtils brace ends of functions should handle a nested function.",
                    "description": "should handle a nested function",
                    "passed": true
                },
                {
                    "name": "JSUtils brace ends of functions should handle an end brace in a string.",
                    "description": "should handle an end brace in a string",
                    "passed": true
                },
                {
                    "name": "JSUtils brace ends of functions should handle an end brace in a single-quoted string.",
                    "description": "should handle an end brace in a single-quoted string",
                    "passed": true
                },
                {
                    "name": "JSUtils brace ends of functions should handle an end brace in a line comment.",
                    "description": "should handle an end brace in a line comment",
                    "passed": true
                },
                {
                    "name": "JSUtils brace ends of functions should handle an end brace in a block comment.",
                    "description": "should handle an end brace in a block comment",
                    "passed": true
                },
                {
                    "name": "JSUtils brace ends of functions should handle an end brace in a multiline block comment.",
                    "description": "should handle an end brace in a multiline block comment",
                    "passed": true
                },
                {
                    "name": "JSUtils brace ends of functions should handle an end brace in a regexp.",
                    "description": "should handle an end brace in a regexp",
                    "passed": true
                },
                {
                    "name": "JSUtils brace ends of functions should handle a single-line function.",
                    "description": "should handle a single-line function",
                    "passed": true
                },
                {
                    "name": "JSUtils brace ends of functions should handle a single-line function with a fake brace.",
                    "description": "should handle a single-line function with a fake brace",
                    "passed": true
                },
                {
                    "name": "JSUtils brace ends of functions should handle a complicated case.",
                    "description": "should handle a complicated case",
                    "passed": true
                },
                {
                    "name": "JSUtils brace end of function that ends at end of file should find the end of a function that ends exactly at the end of the file.",
                    "description": "should find the end of a function that ends exactly at the end of the file",
                    "passed": true
                },
                {
                    "name": "JSUtils end of function that's unclosed at end of file should find the end of a function that is unclosed at the end of the file.",
                    "description": "should find the end of a function that is unclosed at the end of the file",
                    "passed": true
                },
                {
                    "name": "JSUtils with real-world jQuery JS code should find the first instance of the pushStack function.",
                    "description": "should find the first instance of the pushStack function",
                    "passed": true
                },
                {
                    "name": "JSUtils with real-world jQuery JS code should find all instances of the ready function.",
                    "description": "should find all instances of the ready function",
                    "passed": true
                },
                {
                    "name": "JSUtils with real-world jQuery JS code should return an empty array when findAllMatchingSelectors() can't find any matches.",
                    "description": "should return an empty array when findAllMatchingSelectors() can't find any matches",
                    "passed": true
                }
            ]
        },
        "JS Indexing: ": {
            "id": 111,
            "name": "JS Indexing: ",
            "specCount": 5,
            "passedCount": 5,
            "failedCount": 0,
            "specs": [
                {
                    "name": "JS Indexing:  Index integrity should handle colliding with prototype properties.",
                    "description": "should handle colliding with prototype properties",
                    "passed": true
                },
                {
                    "name": "JS Indexing:  Working with unsaved changes should return the correct offsets if the file has changed.",
                    "description": "should return the correct offsets if the file has changed",
                    "passed": true
                },
                {
                    "name": "JS Indexing:  Working with unsaved changes should return the correct offsets if the results were cached and the file has changed.",
                    "description": "should return the correct offsets if the results were cached and the file has changed",
                    "passed": true
                },
                {
                    "name": "JS Indexing:  Working with unsaved changes should return a newly created function in an unsaved file.",
                    "description": "should return a newly created function in an unsaved file",
                    "passed": true
                },
                {
                    "name": "JS Indexing:  Working with unsaved changes should return a newly created function in an unsaved file that already has cached results.",
                    "description": "should return a newly created function in an unsaved file that already has cached results",
                    "passed": true
                }
            ]
        },
        "CSSUtils": {
            "id": 114,
            "name": "CSSUtils",
            "specCount": 48,
            "passedCount": 48,
            "failedCount": 0,
            "specs": [
                {
                    "name": "CSSUtils basics should parse an empty string.",
                    "description": "should parse an empty string",
                    "passed": true
                },
                {
                    "name": "CSSUtils line offsets should return correct start and end line numbers for simple rules.",
                    "description": "should return correct start and end line numbers for simple rules",
                    "passed": true
                },
                {
                    "name": "CSSUtils line offsets should handle rules on adjacent lines.",
                    "description": "should handle rules on adjacent lines",
                    "passed": true
                },
                {
                    "name": "CSSUtils line offsets should return correct group range when selector group spans multiple lines.",
                    "description": "should return correct group range when selector group spans multiple lines",
                    "passed": true
                },
                {
                    "name": "CSSUtils with the universal selector should match a tag name not referenced anywhere in the CSS.",
                    "description": "should match a tag name not referenced anywhere in the CSS",
                    "passed": true
                },
                {
                    "name": "CSSUtils with the universal selector should match a tag name also referenced elsewhere in the CSS.",
                    "description": "should match a tag name also referenced elsewhere in the CSS",
                    "passed": true
                },
                {
                    "name": "CSSUtils with sprint 4 exemptions should match a class selector (right-most only, no pseudo or attr selectors).",
                    "description": "should match a class selector (right-most only, no pseudo or attr selectors)",
                    "passed": true
                },
                {
                    "name": "CSSUtils with sprint 4 exemptions should match a type selector (can terminate with class name, ID, pseudo or attr selectors).",
                    "description": "should match a type selector (can terminate with class name, ID, pseudo or attr selectors)",
                    "passed": true
                },
                {
                    "name": "CSSUtils with real-world Bootstrap CSS code should find the first instance of the h2 selector.",
                    "description": "should find the first instance of the h2 selector",
                    "passed": true
                },
                {
                    "name": "CSSUtils with real-world Bootstrap CSS code should find all instances of the h2 selector.",
                    "description": "should find all instances of the h2 selector",
                    "passed": true
                },
                {
                    "name": "CSSUtils with real-world Bootstrap CSS code should return an empty array when findAllMatchingSelectors() can't find any matches.",
                    "description": "should return an empty array when findAllMatchingSelectors() can't find any matches",
                    "passed": true
                },
                {
                    "name": "CSSUtils escapes should remove simple backslashes for simple characters.",
                    "description": "should remove simple backslashes for simple characters",
                    "passed": true
                },
                {
                    "name": "CSSUtils escapes should remove simple backslashes with escaped characters.",
                    "description": "should remove simple backslashes with escaped characters",
                    "passed": true
                },
                {
                    "name": "CSSUtils escapes should parse '\\XX ' as a single character.",
                    "description": "should parse '\\XX ' as a single character",
                    "passed": true
                },
                {
                    "name": "CSSUtils escapes should parse '\\XXXX ' as a single character.",
                    "description": "should parse '\\XXXX ' as a single character",
                    "passed": true
                },
                {
                    "name": "CSSUtils escapes should parse '\\XXXXXX' as a single character.",
                    "description": "should parse '\\XXXXXX' as a single character",
                    "passed": true
                },
                {
                    "name": "CSSUtils escapes should not trim end spaces.",
                    "description": "should not trim end spaces",
                    "passed": true
                },
                {
                    "name": "CSSUtils escapes should detect all combinations.",
                    "description": "should detect all combinations",
                    "passed": true
                },
                {
                    "name": "CSSUtils escapes should parse '\\AX' as AX.",
                    "description": "should parse '\\AX' as AX",
                    "passed": true
                },
                {
                    "name": "CSSUtils escapes should parse '\\AXXX' as AXXX.",
                    "description": "should parse '\\AXXX' as AXXX",
                    "passed": true
                },
                {
                    "name": "CSSUtils escapes should replace out of range characters with U+FFFD.",
                    "description": "should replace out of range characters with U+FFFD",
                    "passed": true
                },
                {
                    "name": "CSSUtils escapes should parse everything less does.",
                    "description": "should parse everything less does",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos selector groups should find the selector at a document pos.",
                    "description": "should find the selector at a document pos",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos selector groups should return empty string if selection is not in a style rule.",
                    "description": "should return empty string if selection is not in a style rule",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos selector groups should return a comma separated string of all selectors for the rule.",
                    "description": "should return a comma separated string of all selectors for the rule",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos selector groups should support multiple rules on the same line.",
                    "description": "should support multiple rules on the same line",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos selector groups should support multiple rules on multiple lines.",
                    "description": "should support multiple rules on multiple lines",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos comments should ignore rules inside comments.",
                    "description": "should ignore rules inside comments",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos comments should find rules adjacent to comments.",
                    "description": "should find rules adjacent to comments",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos comments should find rules when the position is inside a nested comment.",
                    "description": "should find rules when the position is inside a nested comment",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos pseudo-classes and at-rules should find a simple pseudo selector.",
                    "description": "should find a simple pseudo selector",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos pseudo-classes and at-rules should find a selector with a preceding at-rule.",
                    "description": "should find a selector with a preceding at-rule",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos pseudo-classes and at-rules should not find a selector when inside an at-rule.",
                    "description": "should not find a selector when inside an at-rule",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos complex selectors should find pseudo selectors.",
                    "description": "should find pseudo selectors",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos complex selectors should find attribute selectors.",
                    "description": "should find attribute selectors",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos complex selectors should find structural pseudo-classes.",
                    "description": "should find structural pseudo-classes",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos complex selectors should find combinators.",
                    "description": "should find combinators",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos beginning, middle and end of selector should find selector when pos is at beginning of selector name.",
                    "description": "should find selector when pos is at beginning of selector name",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos beginning, middle and end of selector should find selector when pos is in the middle of selector name.",
                    "description": "should find selector when pos is in the middle of selector name",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos beginning, middle and end of selector should find selector when pos is at the end of a selector name.",
                    "description": "should find selector when pos is at the end of a selector name",
                    "passed": true
                },
                {
                    "name": "CSSUtils findSelectorAtDocumentPos beginning, middle and end of selector should not find selector when pos is before a selector name.",
                    "description": "should not find selector when pos is before a selector name",
                    "passed": true
                },
                {
                    "name": "CSSUtils find correct positions of selectors should find selector positions when whitespace between selector and '{'.",
                    "description": "should find selector positions when whitespace between selector and '{'",
                    "passed": true
                },
                {
                    "name": "CSSUtils find correct positions of selectors should find selector positions when no whitespace between selector and '{'.",
                    "description": "should find selector positions when no whitespace between selector and '{'",
                    "passed": true
                },
                {
                    "name": "CSSUtils find correct positions of selectors should find selector positions when '{' on the next line.",
                    "description": "should find selector positions when '{' on the next line",
                    "passed": true
                },
                {
                    "name": "CSSUtils find correct positions of selectors should find selector positions when '{' on the next line and selector is indented.",
                    "description": "should find selector positions when '{' on the next line and selector is indented",
                    "passed": true
                },
                {
                    "name": "CSSUtils find correct positions of selectors should find selector positions when '{' on the next line and selector is indented with tabs.",
                    "description": "should find selector positions when '{' on the next line and selector is indented with tabs",
                    "passed": true
                },
                {
                    "name": "CSSUtils find correct positions of selectors should find selector positions in a selector group when '{' on the next line.",
                    "description": "should find selector positions in a selector group when '{' on the next line",
                    "passed": true
                },
                {
                    "name": "CSSUtils find correct positions of selectors should find selector positions in a selector group when '{' on the next line and selector group is indented.",
                    "description": "should find selector positions in a selector group when '{' on the next line and selector group is indented",
                    "passed": true
                }
            ]
        },
        "CSS Parsing: ": {
            "id": 127,
            "name": "CSS Parsing: ",
            "specCount": 28,
            "passedCount": 28,
            "failedCount": 0,
            "specs": [
                {
                    "name": "CSS Parsing:  Simple selectors:  should match a lone type selector given a type.",
                    "description": "should match a lone type selector given a type",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  should match a lone class selector given a class.",
                    "description": "should match a lone class selector given a class",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  should match a lone id selector given an id.",
                    "description": "should match a lone id selector given an id",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  shouldn't confuse type, class, and id.",
                    "description": "shouldn't confuse type, class, and id",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  should be case-sensitive for all but types.",
                    "description": "should be case-sensitive for all but types",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  should match permissively.",
                    "description": "should match permissively",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  should allow searching conjunctions of type, class, and id.",
                    "description": "should allow searching conjunctions of type, class, and id",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  should match lone '*' given any tag; else ignore.",
                    "description": "should match lone '*' given any tag; else ignore",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  should ignore pseudo-class selectors.",
                    "description": "should ignore pseudo-class selectors",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  should ignore pseudo-elements with arguments.",
                    "description": "should ignore pseudo-elements with arguments",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  should ignore attribute selectors.",
                    "description": "should ignore attribute selectors",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  should ignore the content of strings.",
                    "description": "should ignore the content of strings",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  should handle unusual whitespace.",
                    "description": "should handle unusual whitespace",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  shouldn't crash on CSS3 selectors.",
                    "description": "shouldn't crash on CSS3 selectors",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Simple selectors:  shouldn't crash on CSS Animation syntax (@keyframes).",
                    "description": "shouldn't crash on CSS Animation syntax (@keyframes)",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Combinators should ignore descendant combinators.",
                    "description": "should ignore descendant combinators",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Combinators should ignore other combinators.",
                    "description": "should ignore other combinators",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Combinators should find the target of combinators with no whitespace.",
                    "description": "should find the target of combinators with no whitespace",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Selector groups should match any item in selector group.",
                    "description": "should match any item in selector group",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  At-rules should handle @media.",
                    "description": "should handle @media",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  At-rules should handle @page.",
                    "description": "should handle @page",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  LESS Known Issues should handle an empty declaration (extra semi-colon).",
                    "description": "should handle an empty declaration (extra semi-colon)",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  LESS Known Issues should handle IE filter syntaxes.",
                    "description": "should handle IE filter syntaxes",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  LESS Known Issues should handle unnecessary escape codes.",
                    "description": "should handle unnecessary escape codes",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  LESS Known Issues should handle comments within properties.",
                    "description": "should handle comments within properties",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Working with real public CSSUtils API should include comment preceding selector (issue #403).",
                    "description": "should include comment preceding selector (issue #403)",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Working with unsaved changes should return the correct offsets if the file has changed.",
                    "description": "should return the correct offsets if the file has changed",
                    "passed": true
                },
                {
                    "name": "CSS Parsing:  Working with unsaved changes should return a newly created rule in an unsaved file.",
                    "description": "should return a newly created rule in an unsaved file",
                    "passed": true
                }
            ]
        },
        "CSS Context Info": {
            "id": 135,
            "name": "CSS Context Info",
            "specCount": 32,
            "passedCount": 32,
            "failedCount": 0,
            "specs": [
                {
                    "name": "CSS Context Info property names and values should return PROP_NAME with empty name immediately after rule start brace.",
                    "description": "should return PROP_NAME with empty name immediately after rule start brace",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_NAME with empty name immediately before end brace.",
                    "description": "should return PROP_NAME with empty name immediately before end brace",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_NAME with empty name before whitespace before property name.",
                    "description": "should return PROP_NAME with empty name before whitespace before property name",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_NAME with empty name in middle of whitespace before property name.",
                    "description": "should return PROP_NAME with empty name in middle of whitespace before property name",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_NAME with empty name at end of whitespace in rule with no property name.",
                    "description": "should return PROP_NAME with empty name at end of whitespace in rule with no property name",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_NAME with empty name immediately after semicolon.",
                    "description": "should return PROP_NAME with empty name immediately after semicolon",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_NAME at beginning/middle/end of a simple property name.",
                    "description": "should return PROP_NAME at beginning/middle/end of a simple property name",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_NAME at beginning/middle/end of a hyphenated property name.",
                    "description": "should return PROP_NAME at beginning/middle/end of a hyphenated property name",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_VALUE with 'new value' flag set immediately after colon.",
                    "description": "should return PROP_VALUE with 'new value' flag set immediately after colon",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_VALUE without 'new value' flag set at beginning/middle/end of a simple property value.",
                    "description": "should return PROP_VALUE without 'new value' flag set at beginning/middle/end of a simple property value",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_VALUE with correct values at beginning/middle of first multi-value property.",
                    "description": "should return PROP_VALUE with correct values at beginning/middle of first multi-value property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_VALUE with 'new value' flag set at end of double-quoted multi-value property.",
                    "description": "should return PROP_VALUE with 'new value' flag set at end of double-quoted multi-value property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_VALUE with correct values at beginning/middle of second multi-value property.",
                    "description": "should return PROP_VALUE with correct values at beginning/middle of second multi-value property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_VALUE with 'new value' flag set at end of second multi-value property.",
                    "description": "should return PROP_VALUE with 'new value' flag set at end of second multi-value property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_VALUE with correct values at beginning/middle/end of third multi-value property.",
                    "description": "should return PROP_VALUE with correct values at beginning/middle/end of third multi-value property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values multi-line cases should return PROP_VALUE with correct values at beginning/middle of first multi-value multi-line property.",
                    "description": "should return PROP_VALUE with correct values at beginning/middle of first multi-value multi-line property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values multi-line cases should return PROP_VALUE with 'new value' flag set at end of double-quoted multi-value multi-line property.",
                    "description": "should return PROP_VALUE with 'new value' flag set at end of double-quoted multi-value multi-line property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values multi-line cases should return PROP_VALUE with correct values at beginning/middle of second multi-value multi-line property.",
                    "description": "should return PROP_VALUE with correct values at beginning/middle of second multi-value multi-line property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values multi-line cases should return PROP_VALUE with 'new value' flag set at end of second multi-value multi-line property.",
                    "description": "should return PROP_VALUE with 'new value' flag set at end of second multi-value multi-line property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values multi-line cases should return PROP_VALUE with correct values at beginning/middle/end of third multi-value multi-line property.",
                    "description": "should return PROP_VALUE with correct values at beginning/middle/end of third multi-value multi-line property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values multi-line cases should return PROP_VALUE with 'new value' flag and existing values immediately after colon with multi-value multi-line property.",
                    "description": "should return PROP_VALUE with 'new value' flag and existing values immediately after colon with multi-value multi-line property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values multi-line cases should return PROP_VALUE with 'new value' flag and existing values at beginning of whitespace before value in multi-line property.",
                    "description": "should return PROP_VALUE with 'new value' flag and existing values at beginning of whitespace before value in multi-line property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_VALUE with 'new value' flag and existing values immediately after colon with multi-value property.",
                    "description": "should return PROP_VALUE with 'new value' flag and existing values immediately after colon with multi-value property",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_VALUE with 'new value' flag and existing values at end of line after comma (possibly with whitespace).",
                    "description": "should return PROP_VALUE with 'new value' flag and existing values at end of line after comma (possibly with whitespace)",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should return PROP_VALUE with 'new value' flag at end of line when there are no existing values.",
                    "description": "should return PROP_VALUE with 'new value' flag at end of line when there are no existing values",
                    "passed": true
                },
                {
                    "name": "CSS Context Info property names and values should treat a value like rgba(0, 0, 0, 0) as separate tokens.",
                    "description": "should treat a value like rgba(0, 0, 0, 0) as separate tokens",
                    "passed": true
                },
                {
                    "name": "CSS Context Info quoting should properly parse a value with single quotes.",
                    "description": "should properly parse a value with single quotes",
                    "passed": true
                },
                {
                    "name": "CSS Context Info quoting should properly parse values with special characters.",
                    "description": "should properly parse values with special characters",
                    "passed": true
                },
                {
                    "name": "CSS Context Info invalid contexts should return empty context for a non-css document.",
                    "description": "should return empty context for a non-css document",
                    "passed": true
                },
                {
                    "name": "CSS Context Info invalid contexts should return empty context for unsupported context.",
                    "description": "should return empty context for unsupported context",
                    "passed": true
                },
                {
                    "name": "CSS Context Info invalid contexts should return empty context for comment.",
                    "description": "should return empty context for comment",
                    "passed": true
                },
                {
                    "name": "CSS Context Info invalid contexts should return empty context for comment in declaration.",
                    "description": "should return empty context for comment in declaration",
                    "passed": true
                }
            ]
        },
        "Live Development": {
            "id": 140,
            "name": "Live Development",
            "specCount": 12,
            "passedCount": 11,
            "failedCount": 1,
            "specs": [
                {
                    "name": "Live Development Live Development startup and shutdown should return a ready socket on Inspector.connect and close the socket on Inspector.disconnect.",
                    "description": "should return a ready socket on Inspector.connect and close the socket on Inspector.disconnect",
                    "passed": false,
                    "messages": [
                        "timeout: timed out after 5000 msec waiting for success Inspector.connectToURL"
                    ]
                },
                {
                    "name": "Live Development CSS Editing should establish a browser connection for an opened html file.",
                    "description": "should establish a browser connection for an opened html file",
                    "passed": true
                },
                {
                    "name": "Live Development CSS Editing should should not start a browser connection for an opened css file.",
                    "description": "should should not start a browser connection for an opened css file",
                    "passed": true
                },
                {
                    "name": "Live Development CSS Editing should push changes through the browser connection.",
                    "description": "should push changes through the browser connection",
                    "passed": true
                },
                {
                    "name": "Live Development CSS Editing should ignore query strings in linked CSS file hrefs.",
                    "description": "should ignore query strings in linked CSS file hrefs",
                    "passed": true
                },
                {
                    "name": "Live Development CSS Editing should push in memory css changes made before the session starts.",
                    "description": "should push in memory css changes made before the session starts",
                    "passed": true
                },
                {
                    "name": "Live Development CSS Editing should reapply in-memory css changes after saving changes in html document.",
                    "description": "should reapply in-memory css changes after saving changes in html document",
                    "passed": true
                },
                {
                    "name": "Live Development CSS Editing should translate urls to/from local paths.",
                    "description": "should translate urls to/from local paths",
                    "passed": true
                },
                {
                    "name": "Live Development URL Mapping should validate base urls.",
                    "description": "should validate base urls",
                    "passed": true
                },
                {
                    "name": "Live Development Highlighting elements in browser from a CSS rule should toggle the highlight via a command.",
                    "description": "should toggle the highlight via a command",
                    "passed": true
                },
                {
                    "name": "Live Development Highlighting elements in browser from a CSS rule should redraw highlights when the document changes.",
                    "description": "should redraw highlights when the document changes",
                    "passed": true
                },
                {
                    "name": "Live Development Highlighting elements in browser from a CSS rule should redraw highlights when the cursor moves.",
                    "description": "should redraw highlights when the cursor moves",
                    "passed": true
                }
            ]
        },
        "JSQuickEdit": {
            "id": 145,
            "name": "JSQuickEdit",
            "specCount": 5,
            "passedCount": 5,
            "failedCount": 0,
            "specs": [
                {
                    "name": "JSQuickEdit javaScriptFunctionProvider should ignore tokens that are not function calls or references.",
                    "description": "should ignore tokens that are not function calls or references",
                    "passed": true
                },
                {
                    "name": "JSQuickEdit javaScriptFunctionProvider should open a function with  form: function functionName().",
                    "description": "should open a function with  form: function functionName()",
                    "passed": true
                },
                {
                    "name": "JSQuickEdit javaScriptFunctionProvider should open a function with  form: functionName = function().",
                    "description": "should open a function with  form: functionName = function()",
                    "passed": true
                },
                {
                    "name": "JSQuickEdit javaScriptFunctionProvider should open a function with  form: functionName: function().",
                    "description": "should open a function with  form: functionName: function()",
                    "passed": true
                },
                {
                    "name": "JSQuickEdit Performance suite should open inline editors.",
                    "description": "should open inline editors",
                    "passed": true,
                    "perf": [
                        {
                            "name": "JavaScript Inline Editor Creation",
                            "value": 3604,
                            "children": [
                                {
                                    "name": "syncFileIndex",
                                    "value": 1165
                                },
                                {
                                    "name": "JavaScript Find Function",
                                    "value": 2323,
                                    "children": [
                                        {
                                            "name": "Parallel file search across project",
                                            "value": 2122,
                                            "children": [
                                                {
                                                    "name": "Sum of all DocumentManager.getDocumentForPath() - Document creation during this search",
                                                    "value": "(None)"
                                                },
                                                {
                                                    "name": "Sum of all RegExp search for all functions",
                                                    "value": 221
                                                }
                                            ]
                                        },
                                        {
                                            "name": "Sum of all Find end offset for a single matched function",
                                            "value": 167
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "JavaScript Inline Editor Creation",
                            "value": 202,
                            "children": [
                                {
                                    "name": "syncFileIndex",
                                    "value": "(None)"
                                },
                                {
                                    "name": "JavaScript Find Function",
                                    "value": 131,
                                    "children": [
                                        {
                                            "name": "Parallel file search across project",
                                            "value": 56,
                                            "children": [
                                                {
                                                    "name": "Sum of all DocumentManager.getDocumentForPath() - Document creation during this search",
                                                    "value": "(None)"
                                                },
                                                {
                                                    "name": "Sum of all RegExp search for all functions",
                                                    "value": "(None)"
                                                }
                                            ]
                                        },
                                        {
                                            "name": "Sum of all Find end offset for a single matched function",
                                            "value": "(None)"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "JavaScript Inline Editor Creation",
                            "value": 261,
                            "children": [
                                {
                                    "name": "syncFileIndex",
                                    "value": "(None)"
                                },
                                {
                                    "name": "JavaScript Find Function",
                                    "value": 152,
                                    "children": [
                                        {
                                            "name": "Parallel file search across project",
                                            "value": 65,
                                            "children": [
                                                {
                                                    "name": "Sum of all DocumentManager.getDocumentForPath() - Document creation during this search",
                                                    "value": "(None)"
                                                },
                                                {
                                                    "name": "Sum of all RegExp search for all functions",
                                                    "value": "(None)"
                                                }
                                            ]
                                        },
                                        {
                                            "name": "Sum of all Find end offset for a single matched function",
                                            "value": "(None)"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "JavaScript Inline Editor Creation",
                            "value": 339,
                            "children": [
                                {
                                    "name": "syncFileIndex",
                                    "value": "(None)"
                                },
                                {
                                    "name": "JavaScript Find Function",
                                    "value": 176,
                                    "children": [
                                        {
                                            "name": "Parallel file search across project",
                                            "value": 97,
                                            "children": [
                                                {
                                                    "name": "Sum of all DocumentManager.getDocumentForPath() - Document creation during this search",
                                                    "value": "(None)"
                                                },
                                                {
                                                    "name": "Sum of all RegExp search for all functions",
                                                    "value": "(None)"
                                                }
                                            ]
                                        },
                                        {
                                            "name": "Sum of all Find end offset for a single matched function",
                                            "value": "(None)"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "JavaScript Inline Editor Creation",
                            "value": 252,
                            "children": [
                                {
                                    "name": "syncFileIndex",
                                    "value": "(None)"
                                },
                                {
                                    "name": "JavaScript Find Function",
                                    "value": 177,
                                    "children": [
                                        {
                                            "name": "Parallel file search across project",
                                            "value": 71,
                                            "children": [
                                                {
                                                    "name": "Sum of all DocumentManager.getDocumentForPath() - Document creation during this search",
                                                    "value": "(None)"
                                                },
                                                {
                                                    "name": "Sum of all RegExp search for all functions",
                                                    "value": "(None)"
                                                }
                                            ]
                                        },
                                        {
                                            "name": "Sum of all Find end offset for a single matched function",
                                            "value": "(None)"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "Inline Color Editor - unit": {
            "id": 148,
            "name": "Inline Color Editor - unit",
            "specCount": 123,
            "passedCount": 123,
            "failedCount": 0,
            "specs": [
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should show the correct color when opened on an #rrggbb color.",
                    "description": "should show the correct color when opened on an #rrggbb color",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should open when at the beginning of the color.",
                    "description": "should open when at the beginning of the color",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should open when at the end of the color.",
                    "description": "should open when at the end of the color",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should show the correct color when opened on an #rgb color.",
                    "description": "should show the correct color when opened on an #rgb color",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should show the correct color when opened on an rgb() color.",
                    "description": "should show the correct color when opened on an rgb() color",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should show the correct color when opened on an rgba() color.",
                    "description": "should show the correct color when opened on an rgba() color",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should show the correct color when opened on an hsl() color.",
                    "description": "should show the correct color when opened on an hsl() color",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should show the correct color when opened on an hsla() color.",
                    "description": "should show the correct color when opened on an hsla() color",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should show the correct color when opened on an uppercase hex color.",
                    "description": "should show the correct color when opened on an uppercase hex color",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should show the correct color when opened on a color in a shorthand property.",
                    "description": "should show the correct color when opened on a color in a shorthand property",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should show the correct color when opened on an rgba() color with a leading period in the alpha field.",
                    "description": "should show the correct color when opened on an rgba() color with a leading period in the alpha field",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should show the correct color when opened on an hsla() color with a leading period in the alpha field.",
                    "description": "should show the correct color when opened on an hsla() color with a leading period in the alpha field",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should not open when not on a color.",
                    "description": "should not open when not on a color",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should not open when on an invalid color.",
                    "description": "should not open when on an invalid color",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should not open when on an hsl color with missing percent signs.",
                    "description": "should not open when on an hsl color with missing percent signs",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should open on the second color when there are two colors in the same line.",
                    "description": "should open on the second color when there are two colors in the same line",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS simple open cases should properly add/remove ref to document when opened/closed.",
                    "description": "should properly add/remove ref to document when opened/closed",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS update host document on edit in color editor should update host document when change is committed in color editor.",
                    "description": "should update host document when change is committed in color editor",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS update host document on edit in color editor should update correct range of host document with color format of different length.",
                    "description": "should update correct range of host document with color format of different length",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS update host document on edit in color editor should not invalidate range when change is committed.",
                    "description": "should not invalidate range when change is committed",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS update color editor on edit in host editor should update when edit is made to color range in host editor.",
                    "description": "should update when edit is made to color range in host editor",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS update color editor on edit in host editor should close itself if edit is made that destroys end bookmark and leaves color invalid.",
                    "description": "should close itself if edit is made that destroys end bookmark and leaves color invalid",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS update color editor on edit in host editor should maintain the range if the user deletes the last character of the color and types a new one.",
                    "description": "should maintain the range if the user deletes the last character of the color and types a new one",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS update color editor on edit in host editor should not update the end bookmark to a shorter valid match if the bookmark still exists and the color becomes invalid.",
                    "description": "should not update the end bookmark to a shorter valid match if the bookmark still exists and the color becomes invalid",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - CSS edit batching should combine multiple edits within the same inline editor into a single undo in the host editor.",
                    "description": "should combine multiple edits within the same inline editor into a single undo in the host editor",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - HTML should open on a color in an HTML file.",
                    "description": "should open on a color in an HTML file",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - used colors processing should trim the original array to the given length.",
                    "description": "should trim the original array to the given length",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Inline editor - used colors processing should remove duplicates from the original array and sort it by usage.",
                    "description": "should remove duplicates from the original array and sort it by usage",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI simple load/commit should load the initial color correctly.",
                    "description": "should load the initial color correctly",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI simple load/commit should load a committed color correctly.",
                    "description": "should load a committed color correctly",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI simple load/commit should call the callback when a new color is committed.",
                    "description": "should call the callback when a new color is committed",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI conversions should convert a hex color to rgb when mode button clicked.",
                    "description": "should convert a hex color to rgb when mode button clicked",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI conversions should convert a hex color to hsl when mode button clicked.",
                    "description": "should convert a hex color to hsl when mode button clicked",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI conversions should convert an rgb color to hex when mode button clicked.",
                    "description": "should convert an rgb color to hex when mode button clicked",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI conversions should convert an rgba color to hex (dropping alpha) when mode button clicked.",
                    "description": "should convert an rgba color to hex (dropping alpha) when mode button clicked",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI conversions should convert an rgb color to hsl when mode button clicked.",
                    "description": "should convert an rgb color to hsl when mode button clicked",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI conversions should convert an rgba color to hsla when mode button clicked.",
                    "description": "should convert an rgba color to hsla when mode button clicked",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI conversions should convert an hsl color to hex when mode button clicked.",
                    "description": "should convert an hsl color to hex when mode button clicked",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI conversions should convert an hsla color to hex (dropping alpha) when mode button clicked.",
                    "description": "should convert an hsla color to hex (dropping alpha) when mode button clicked",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI conversions should convert an hsl color to rgb when mode button clicked.",
                    "description": "should convert an hsl color to rgb when mode button clicked",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI conversions should convert an hsla color to rgba when mode button clicked.",
                    "description": "should convert an hsla color to rgba when mode button clicked",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should set saturation on mousedown.",
                    "description": "should set saturation on mousedown",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should set saturation on drag.",
                    "description": "should set saturation on drag",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should clip saturation to min value.",
                    "description": "should clip saturation to min value",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should clip saturation to max value.",
                    "description": "should clip saturation to max value",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should set value on mousedown.",
                    "description": "should set value on mousedown",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should set value on drag.",
                    "description": "should set value on drag",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should clip value to min value.",
                    "description": "should clip value to min value",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should clip value to max value.",
                    "description": "should clip value to max value",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should set hue on mousedown.",
                    "description": "should set hue on mousedown",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should set hue on drag.",
                    "description": "should set hue on drag",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should clip hue to min value.",
                    "description": "should clip hue to min value",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should clip hue to max value.",
                    "description": "should clip hue to max value",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should set opacity on mousedown.",
                    "description": "should set opacity on mousedown",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should set opacity on drag.",
                    "description": "should set opacity on drag",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should clip opacity to min value.",
                    "description": "should clip opacity to min value",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with mouse should clip opacity to max value.",
                    "description": "should clip opacity to max value",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should increase saturation by 1.5% on right arrow.",
                    "description": "should increase saturation by 1.5% on right arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should clip max saturation on right arrow.",
                    "description": "should clip max saturation on right arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should increase saturation by 7.5% on shift right arrow.",
                    "description": "should increase saturation by 7.5% on shift right arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should clip max saturation on shift right arrow.",
                    "description": "should clip max saturation on shift right arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should decrease saturation by 1.5% on left arrow.",
                    "description": "should decrease saturation by 1.5% on left arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should clip min saturation on left arrow.",
                    "description": "should clip min saturation on left arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should decrease saturation by 7.5% on shift left arrow.",
                    "description": "should decrease saturation by 7.5% on shift left arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should clip min saturation on shift left arrow.",
                    "description": "should clip min saturation on shift left arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should increase value by 1.5% on up arrow.",
                    "description": "should increase value by 1.5% on up arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should clip max value on up arrow.",
                    "description": "should clip max value on up arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should increase value by 7.5% on shift up arrow.",
                    "description": "should increase value by 7.5% on shift up arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should clip max value on shift up arrow.",
                    "description": "should clip max value on shift up arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should decrease value by 1.5% on down arrow.",
                    "description": "should decrease value by 1.5% on down arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should clip min value on down arrow.",
                    "description": "should clip min value on down arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should decrease value by 7.5% on shift down arrow.",
                    "description": "should decrease value by 7.5% on shift down arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should clip min value on shift down arrow.",
                    "description": "should clip min value on shift down arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should increase hue by 3.6 on up arrow.",
                    "description": "should increase hue by 3.6 on up arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should wrap around max hue on up arrow.",
                    "description": "should wrap around max hue on up arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should increase hue by 18 on shift up arrow.",
                    "description": "should increase hue by 18 on shift up arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should wrap around max hue on shift up arrow.",
                    "description": "should wrap around max hue on shift up arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should decrease hue by 3.6 on down arrow.",
                    "description": "should decrease hue by 3.6 on down arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should wrap around min hue on down arrow.",
                    "description": "should wrap around min hue on down arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should decrease hue by 18 on shift down arrow.",
                    "description": "should decrease hue by 18 on shift down arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should wrap around min hue on shift down arrow.",
                    "description": "should wrap around min hue on shift down arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should increase opacity by 0.01 on up arrow.",
                    "description": "should increase opacity by 0.01 on up arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should clip max opacity on up arrow.",
                    "description": "should clip max opacity on up arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should increase opacity by 0.05 on shift up arrow.",
                    "description": "should increase opacity by 0.05 on shift up arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should clip max opacity on shift up arrow.",
                    "description": "should clip max opacity on shift up arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should decrease opacity by 0.01 on down arrow.",
                    "description": "should decrease opacity by 0.01 on down arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should clip min opacity on down arrow.",
                    "description": "should clip min opacity on down arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should decrease opacity by 0.05 on shift down arrow.",
                    "description": "should decrease opacity by 0.05 on shift down arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should clip min opacity on shift down arrow.",
                    "description": "should clip min opacity on shift down arrow",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should increase hue by 18 on shift up arrow even if saturation is 0.",
                    "description": "should increase hue by 18 on shift up arrow even if saturation is 0",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should increase hue by 18 on shift up arrow for a near-gray hex color.",
                    "description": "should increase hue by 18 on shift up arrow for a near-gray hex color",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should not change value when hue changes.",
                    "description": "should not change value when hue changes",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should prevent default on the key event for an unhandled arrow key on non-text-field.",
                    "description": "should prevent default on the key event for an unhandled arrow key on non-text-field",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should prevent default on left arrow at the start of the text field.",
                    "description": "should prevent default on left arrow at the start of the text field",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should not prevent default on left arrow in the middle of the text field.",
                    "description": "should not prevent default on left arrow in the middle of the text field",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should not prevent default on left arrow at the end of the text field.",
                    "description": "should not prevent default on left arrow at the end of the text field",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should not prevent default on left arrow with a range selection.",
                    "description": "should not prevent default on left arrow with a range selection",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should not prevent default on right arrow at the start of the text field.",
                    "description": "should not prevent default on right arrow at the start of the text field",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should not prevent default on right arrow in the middle of the text field.",
                    "description": "should not prevent default on right arrow in the middle of the text field",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should prevent default on right arrow at the end of the text field.",
                    "description": "should prevent default on right arrow at the end of the text field",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI parameter editing with keyboard should not prevent default on right arrow with a range selection.",
                    "description": "should not prevent default on right arrow with a range selection",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI color swatches and original color should restore to original color when clicked on.",
                    "description": "should restore to original color when clicked on",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI color swatches and original color should create swatches.",
                    "description": "should create swatches",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI color swatches and original color should set color to a swatch when clicked on.",
                    "description": "should set color to a swatch when clicked on",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI input text field syncing should commit valid changes made in the input field on the input event.",
                    "description": "should commit valid changes made in the input field on the input event",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI input text field syncing should commit valid changes made in the input field on the change event.",
                    "description": "should commit valid changes made in the input field on the change event",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI input text field syncing should not commit changes on the input event while the value is invalid, but should keep them in the text field.",
                    "description": "should not commit changes on the input event while the value is invalid, but should keep them in the text field",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI input text field syncing should revert to the previous value on the change event while the value is invalid.",
                    "description": "should revert to the previous value on the change event while the value is invalid",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI input text field syncing should convert percentage RGB values to normal values.",
                    "description": "should convert percentage RGB values to normal values",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI input text field syncing should normalize a string to match tinycolor's format.",
                    "description": "should normalize a string to match tinycolor's format",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should undo when Ctrl-Z is pressed on a focused element in the color editor.",
                    "description": "should undo when Ctrl-Z is pressed on a focused element in the color editor",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should redo when Ctrl-Shift-Z is pressed on a focused element in the color editor.",
                    "description": "should redo when Ctrl-Shift-Z is pressed on a focused element in the color editor",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should redo when Ctrl-Y is pressed on a focused element in the color editor.",
                    "description": "should redo when Ctrl-Y is pressed on a focused element in the color editor",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should redo when Ctrl-Y is pressed after two Ctrl-Zs (only one Ctrl-Z should take effect).",
                    "description": "should redo when Ctrl-Y is pressed after two Ctrl-Zs (only one Ctrl-Z should take effect)",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should undo when Ctrl-Z is pressed after two Ctrl-Ys (only one Ctrl-Y should take effect).",
                    "description": "should undo when Ctrl-Z is pressed after two Ctrl-Ys (only one Ctrl-Y should take effect)",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should undo an rgba conversion.",
                    "description": "should undo an rgba conversion",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should undo an hsla conversion.",
                    "description": "should undo an hsla conversion",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should undo a hex conversion.",
                    "description": "should undo a hex conversion",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should undo a saturation/value change.",
                    "description": "should undo a saturation/value change",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should undo a hue change.",
                    "description": "should undo a hue change",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should undo an opacity change.",
                    "description": "should undo an opacity change",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should undo a text field change.",
                    "description": "should undo a text field change",
                    "passed": true
                },
                {
                    "name": "Inline Color Editor - unit Color editor UI undo/redo should undo a swatch click.",
                    "description": "should undo a swatch click",
                    "passed": true
                }
            ]
        },
        "StaticServer": {
            "id": 164,
            "name": "StaticServer",
            "specCount": 8,
            "passedCount": 8,
            "failedCount": 0,
            "specs": [
                {
                    "name": "StaticServer StaticServerDomain should start a static server on the given folder.",
                    "description": "should start a static server on the given folder",
                    "passed": true
                },
                {
                    "name": "StaticServer StaticServerDomain should serve the text of a file in the given folder.",
                    "description": "should serve the text of a file in the given folder",
                    "passed": true
                },
                {
                    "name": "StaticServer StaticServerDomain should create separate servers for different folders.",
                    "description": "should create separate servers for different folders",
                    "passed": true
                },
                {
                    "name": "StaticServer StaticServerDomain should keep a previous server alive after creating a new server.",
                    "description": "should keep a previous server alive after creating a new server",
                    "passed": true
                },
                {
                    "name": "StaticServer StaticServerProvider should have initialized the static server provider immediately after launch.",
                    "description": "should have initialized the static server provider immediately after launch",
                    "passed": true
                },
                {
                    "name": "StaticServer StaticServerProvider should only serve html files that are in the project file hierarchy.",
                    "description": "should only serve html files that are in the project file hierarchy",
                    "passed": true
                },
                {
                    "name": "StaticServer StaticServerProvider should be ready to serve a file in the project and return an appropriate baseUrl.",
                    "description": "should be ready to serve a file in the project and return an appropriate baseUrl",
                    "passed": true
                },
                {
                    "name": "StaticServer StaticServerProvider should decline serving if not connected to node.",
                    "description": "should decline serving if not connected to node",
                    "passed": true
                }
            ]
        },
        "CSS Code Hinting": {
            "id": 167,
            "name": "CSS Code Hinting",
            "specCount": 28,
            "passedCount": 28,
            "failedCount": 0,
            "specs": [
                {
                    "name": "CSS Code Hinting CSS properties in general (selection of correct property based on input) should list all prop-name hints right after curly bracket.",
                    "description": "should list all prop-name hints right after curly bracket",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS properties in general (selection of correct property based on input) should list all prop-namehints in new line.",
                    "description": "should list all prop-namehints in new line",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS properties in general (selection of correct property based on input) should list all prop-name hints starting with 'b' in new line.",
                    "description": "should list all prop-name hints starting with 'b' in new line",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS properties in general (selection of correct property based on input) should list all prop-name hints starting with 'bord' .",
                    "description": "should list all prop-name hints starting with 'bord' ",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS properties in general (selection of correct property based on input) should list all prop-name hints starting with 'border-' .",
                    "description": "should list all prop-name hints starting with 'border-' ",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS properties in general (selection of correct property based on input) should list only prop-name hint border-color.",
                    "description": "should list only prop-name hint border-color",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS properties in general (selection of correct property based on input) should list prop-name hints at end of property-value finished by ;.",
                    "description": "should list prop-name hints at end of property-value finished by ;",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS properties in general (selection of correct property based on input) should NOT list prop-name hints right before curly bracket.",
                    "description": "should NOT list prop-name hints right before curly bracket",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS properties in general (selection of correct property based on input) should NOT list prop-name hints after declaration of mediatype.",
                    "description": "should NOT list prop-name hints after declaration of mediatype",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS properties in general (selection of correct property based on input) should NOT list prop-name hints if previous property is not closed properly.",
                    "description": "should NOT list prop-name hints if previous property is not closed properly",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS properties in general (selection of correct property based on input) should NOT list prop-name hints in media type declaration.",
                    "description": "should NOT list prop-name hints in media type declaration",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS attribute insertHint should insert colon prop-name selected.",
                    "description": "should insert colon prop-name selected",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS attribute insertHint should not insert semicolon after prop-value selected.",
                    "description": "should not insert semicolon after prop-value selected",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS attribute insertHint should insert prop-name directly after semicolon.",
                    "description": "should insert prop-name directly after semicolon",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS attribute insertHint should insert nothing but the closure(semicolon) if prop-value is fully written.",
                    "description": "should insert nothing but the closure(semicolon) if prop-value is fully written",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS prop-value hints should list all prop-values for 'display' after colon.",
                    "description": "should list all prop-values for 'display' after colon",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS prop-value hints should list all prop-values for 'display' after colon and whitespace.",
                    "description": "should list all prop-values for 'display' after colon and whitespace",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS prop-value hints should list all prop-values starting with 'in' for 'display' after colon and whitespace.",
                    "description": "should list all prop-values starting with 'in' for 'display' after colon and whitespace",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS prop-value hints should NOT list prop-value hints for unknown prop-name.",
                    "description": "should NOT list prop-value hints for unknown prop-name",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS hint provider inside mixed htmlfiles should list prop-name hints right after curly bracket.",
                    "description": "should list prop-name hints right after curly bracket",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS hint provider inside mixed htmlfiles should list prop-name hints inside single-line styletags at start.",
                    "description": "should list prop-name hints inside single-line styletags at start",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS hint provider inside mixed htmlfiles should list prop-name hints inside single-line styletags after semicolon.",
                    "description": "should list prop-name hints inside single-line styletags after semicolon",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS hint provider inside mixed htmlfiles should list prop-name hints inside multi-line styletags with cursor in first line.",
                    "description": "should list prop-name hints inside multi-line styletags with cursor in first line",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS hint provider inside mixed htmlfiles should list prop-name hints inside multi-line styletags with cursor in last line.",
                    "description": "should list prop-name hints inside multi-line styletags with cursor in last line",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS hint provider inside mixed htmlfiles should NOT list prop-name hints between closed styletag and new opening styletag.",
                    "description": "should NOT list prop-name hints between closed styletag and new opening styletag",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS hint provider inside mixed htmlfiles should NOT list hints right before curly bracket.",
                    "description": "should NOT list hints right before curly bracket",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS hint provider inside mixed htmlfiles should NOT list hints inside head-tag.",
                    "description": "should NOT list hints inside head-tag",
                    "passed": true
                },
                {
                    "name": "CSS Code Hinting CSS hint provider in other filecontext (e.g. javascript) should NOT list hints after function declaration.",
                    "description": "should NOT list hints after function declaration",
                    "passed": true
                }
            ]
        },
        "HTML Attribute Hinting": {
            "id": 173,
            "name": "HTML Attribute Hinting",
            "specCount": 65,
            "passedCount": 65,
            "failedCount": 0,
            "specs": [
                {
                    "name": "HTML Attribute Hinting Tag hint provider should not hint within <style> block.",
                    "description": "should not hint within <style> block",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Tag hint provider should hint for < just before existing tag.",
                    "description": "should hint for < just before existing tag",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Tag hint provider should filter hints by prefix.",
                    "description": "should filter hints by prefix",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Tag hint provider should list hints between '<' and some trailing spaces.",
                    "description": "should list hints between '<' and some trailing spaces",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should list hints at start of existing attribute.",
                    "description": "should list hints at start of existing attribute",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should list hints within existing attribute.",
                    "description": "should list hints within existing attribute",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should list hints at end of existing attribute.",
                    "description": "should list hints at end of existing attribute",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should list hints at end of existing attribute with whitespace.",
                    "description": "should list hints at end of existing attribute with whitespace",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should list hints to right of attribute value and a space.",
                    "description": "should list hints to right of attribute value and a space",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints to right of '=' sign on id attr.",
                    "description": "should NOT list hints to right of '=' sign on id attr",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should list hints to right of '=' sign.",
                    "description": "should list hints to right of '=' sign",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints to right of '=' sign with whitespace on id attr.",
                    "description": "should NOT list hints to right of '=' sign with whitespace on id attr",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should list hints to right of '=' sign with whitespace.",
                    "description": "should list hints to right of '=' sign with whitespace",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints to right of attribute value with no separating space.",
                    "description": "should NOT list hints to right of attribute value with no separating space",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints within tag name.",
                    "description": "should NOT list hints within tag name",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should list hints to right of tag name and a space.",
                    "description": "should list hints to right of tag name and a space",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should list hints between tag name and attribute name (space on both sides of cursor).",
                    "description": "should list hints between tag name and attribute name (space on both sides of cursor)",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should list hints between prev attribute value and next attribute name (space on both sides of cursor).",
                    "description": "should list hints between prev attribute value and next attribute name (space on both sides of cursor)",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints to left of tag.",
                    "description": "should NOT list hints to left of tag",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints within text content or whitespace.",
                    "description": "should NOT list hints within text content or whitespace",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints within doctype 'tag'.",
                    "description": "should NOT list hints within doctype 'tag'",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints within closing tag.",
                    "description": "should NOT list hints within closing tag",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints between begin 'div' and end 'div' tag.",
                    "description": "should NOT list hints between begin 'div' and end 'div' tag",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints between an empty tag and 'body' end tag.",
                    "description": "should NOT list hints between an empty tag and 'body' end tag",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints between the 'body' begin tag and 'h1' begin tag.",
                    "description": "should NOT list hints between the 'body' begin tag and 'h1' begin tag",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints between the 'h1' end tag and 'h3' begin tag.",
                    "description": "should NOT list hints between the 'h1' end tag and 'h3' begin tag",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints after an HTML comment.",
                    "description": "should NOT list hints after an HTML comment",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should list hints on incomplete tag, after tag name.",
                    "description": "should list hints on incomplete tag, after tag name",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints on incomplete tag, at end of tag name.",
                    "description": "should NOT list hints on incomplete tag, at end of tag name",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should NOT list hints to left of incomplete tag.",
                    "description": "should NOT list hints to left of incomplete tag",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute name hint provider should list hints on incomplete attribute.",
                    "description": "should list hints on incomplete attribute",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute value hint provider should list attribute value hints for a single quote after the equal sign.",
                    "description": "should list attribute value hints for a single quote after the equal sign",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute value hint provider should list attribute value hints within an existing attribute value.",
                    "description": "should list attribute value hints within an existing attribute value",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute value hint provider should list attribute value hints within an unquoted attribute value.",
                    "description": "should list attribute value hints within an unquoted attribute value",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute value hint provider should list sorted boolean attribute value hints.",
                    "description": "should list sorted boolean attribute value hints",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute value hint provider should NOT list attribute value hints to the right of a closing double quote.",
                    "description": "should NOT list attribute value hints to the right of a closing double quote",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute value hint provider should NOT list attribute value hints to the right of a closing single quote.",
                    "description": "should NOT list attribute value hints to the right of a closing single quote",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute value hint provider should list attribute value hints for type attribute of style tag.",
                    "description": "should list attribute value hints for type attribute of style tag",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute value hint provider should NOT list any attribute value for type attribute of embed tag.",
                    "description": "should NOT list any attribute value for type attribute of embed tag",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute value hint provider should NOT list any attribute value for an unknown attribute name.",
                    "description": "should NOT list any attribute value for an unknown attribute name",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Valueless attributes should list hints after valueless attribute.",
                    "description": "should list hints after valueless attribute",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Valueless attributes should list hints after attribute that follows a valueless attribute.",
                    "description": "should list hints after attribute that follows a valueless attribute",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Valueless attributes should list attribute value hints for an attribute that follows a valueless attribute.",
                    "description": "should list attribute value hints for an attribute that follows a valueless attribute",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Valueless attributes should NOT list attribute value hints when the cursor is after the end quote of an attribute value.",
                    "description": "should NOT list attribute value hints when the cursor is after the end quote of an attribute value",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should insert =\"\" after attribute.",
                    "description": "should insert =\"\" after attribute",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should make explicit request for new hints after attribute name has been inserted.",
                    "description": "should make explicit request for new hints after attribute name has been inserted",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should NOT insert =\"\" after valueless attribute.",
                    "description": "should NOT insert =\"\" after valueless attribute",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should overwrite attribute but not change value, cursor at start.",
                    "description": "should overwrite attribute but not change value, cursor at start",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should change nothing when cursor at end.",
                    "description": "should change nothing when cursor at end",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should overwrite attribute with valueless attribute, but still not change value.",
                    "description": "should overwrite attribute with valueless attribute, but still not change value",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should overwrite valueless attribute with normal attribute, adding value.",
                    "description": "should overwrite valueless attribute with normal attribute, adding value",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should insert the selected attribute value with the closing (single) quote.",
                    "description": "should insert the selected attribute value with the closing (single) quote",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should insert the selected attribute value with the closing (double) quote.",
                    "description": "should insert the selected attribute value with the closing (double) quote",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should insert the selected attribute value inside the existing quotes.",
                    "description": "should insert the selected attribute value inside the existing quotes",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should insert the selected attribute value wrapped in double quotes.",
                    "description": "should insert the selected attribute value wrapped in double quotes",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should replace the partially typed attribute value with the selected attribute value.",
                    "description": "should replace the partially typed attribute value with the selected attribute value",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should replace the partially typed attribute value with the selected attribute value.",
                    "description": "should replace the partially typed attribute value with the selected attribute value",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should replace an existing attribute value with the selected attribute value.",
                    "description": "should replace an existing attribute value with the selected attribute value",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should replace a quoted attribute value and keep the preceding space and quotes.",
                    "description": "should replace a quoted attribute value and keep the preceding space and quotes",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should replace the unquoted attribute value with the selected attribute value in quotes.",
                    "description": "should replace the unquoted attribute value with the selected attribute value in quotes",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should replace an unquoted attribute value when the cursor is inside that value.",
                    "description": "should replace an unquoted attribute value when the cursor is inside that value",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should insert a quoted attribute value before an existing unquoted attribute value with preceding space character.",
                    "description": "should insert a quoted attribute value before an existing unquoted attribute value with preceding space character",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should insert a quoted attribute value before an existing id attribute.",
                    "description": "should insert a quoted attribute value before an existing id attribute",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should insert a quoted attribute value right before the closing > of the tag.",
                    "description": "should insert a quoted attribute value right before the closing > of the tag",
                    "passed": true
                },
                {
                    "name": "HTML Attribute Hinting Attribute insertion should insert a quoted attribute value without overwriting the closing > of the tag.",
                    "description": "should insert a quoted attribute value without overwriting the closing > of the tag",
                    "passed": true
                }
            ]
        },
        "JavaScript Code Hinting": {
            "id": 179,
            "name": "JavaScript Code Hinting",
            "specCount": 34,
            "passedCount": 34,
            "failedCount": 0,
            "specs": [
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list declared variable and function names in outer scope.",
                    "description": "should list declared variable and function names in outer scope",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should filter hints by query.",
                    "description": "should filter hints by query",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list keywords.",
                    "description": "should list keywords",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list explicitly defined globals from JSLint annotations.",
                    "description": "should list explicitly defined globals from JSLint annotations",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list implicitly defined globals from JSLint annotations.",
                    "description": "should list implicitly defined globals from JSLint annotations",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should NOT list implicitly defined globals from missing JSLint annotations.",
                    "description": "should NOT list implicitly defined globals from missing JSLint annotations",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should NOT list explicitly defined globals from JSLint annotations in other files.",
                    "description": "should NOT list explicitly defined globals from JSLint annotations in other files",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should NOT list implicitly defined globals from JSLint annotations in other files.",
                    "description": "should NOT list implicitly defined globals from JSLint annotations in other files",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list literal constants.",
                    "description": "should list literal constants",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should NOT list variables, function names and parameter names out of scope.",
                    "description": "should NOT list variables, function names and parameter names out of scope",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should NOT list variables, function names and parameter names in other files.",
                    "description": "should NOT list variables, function names and parameter names in other files",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should NOT list property names on value lookups.",
                    "description": "should NOT list property names on value lookups",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list declared variable, function and parameter names in inner scope.",
                    "description": "should list declared variable, function and parameter names in inner scope",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list string literals that occur in the file.",
                    "description": "should list string literals that occur in the file",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should NOT list string literals from other files.",
                    "description": "should NOT list string literals from other files",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list property names that occur in the file.",
                    "description": "should list property names that occur in the file",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list property names that occur in other files.",
                    "description": "should list property names that occur in other files",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should NOT list variable, parameter or function names on property lookups.",
                    "description": "should NOT list variable, parameter or function names on property lookups",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should NOT list keywords on property lookups.",
                    "description": "should NOT list keywords on property lookups",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should NOT list implicit hints on left-brace.",
                    "description": "should NOT list implicit hints on left-brace",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list explicit hints for variable and function names.",
                    "description": "should list explicit hints for variable and function names",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list implicit hints when typing property lookups.",
                    "description": "should list implicit hints when typing property lookups",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list implicit hints when typing string literals (single quote).",
                    "description": "should list implicit hints when typing string literals (single quote)",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should list implicit hints when typing string literals (double quote).",
                    "description": "should list implicit hints when typing string literals (double quote)",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should give priority to property names associated with the current context.",
                    "description": "should give priority to property names associated with the current context",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should give priority to property names associated with the current context from other files.",
                    "description": "should give priority to property names associated with the current context from other files",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should choose the correct delimiter for string literal hints with no query.",
                    "description": "should choose the correct delimiter for string literal hints with no query",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should insert value hints with no current query.",
                    "description": "should insert value hints with no current query",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should insert value hints replacing the current query.",
                    "description": "should insert value hints replacing the current query",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should insert property hints with no current query.",
                    "description": "should insert property hints with no current query",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should replace property hints with no current query.",
                    "description": "should replace property hints with no current query",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should replace property hints with a partial current query.",
                    "description": "should replace property hints with a partial current query",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should replace property hints replacing a partial current query.",
                    "description": "should replace property hints replacing a partial current query",
                    "passed": true
                },
                {
                    "name": "JavaScript Code Hinting JavaScript Code Hinting should replace property hints but not following delimiters.",
                    "description": "should replace property hints but not following delimiters",
                    "passed": true
                }
            ]
        }
    },
    "passed": false,
    "totalSpecCount": 951,
    "totalPassedCount": 948,
    "totalFailedCount": 3,
    "sortedNames": [
        "Code Hint Menus",
        "CommandManager",
        "CSS Code Hinting",
        "CSS Context Info",
        "CSS Parsing: ",
        "CSSUtils",
        "Document",
        "DocumentCommandHandlers",
        "Editor",
        "EditorCommandHandlers",
        "EditorManager",
        "EditorOptionHandlers",
        "Extension Installation",
        "Extension Utils",
        "FileIndexManager",
        "FindReplace",
        "HTML Attribute Hinting",
        "HTMLUtils",
        "Inline Color Editor - unit",
        "InlineEditorProviders",
        "Install Extension Dialog",
        "JavaScript Code Hinting",
        "JS Indexing: ",
        "JSQuickEdit",
        "JSUtils",
        "KeyBindingManager",
        "LanguageManager",
        "Live Development",
        "LowLevelFileIO",
        "Menus",
        "MultiRangeInlineEditor",
        "Native Menus",
        "NativeFileSystem",
        "Node Connection",
        "Performance Tests",
        "PreferencesManager",
        "PreferenceStorage",
        "ProjectManager",
        "QuickOpen",
        "StaticServer",
        "StringMatch",
        "UpdateNotification",
        "ViewUtils",
        "WorkingSetView"
    ],
    "activeSpecCount": 951,
    "activeSpecCompleteCount": 951
}